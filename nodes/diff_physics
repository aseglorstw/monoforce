#!/usr/bin/env python

import os
import torch
import numpy as np
import rospy
from monoforce.config import DPhysConfig
from monoforce.models import dphysics
from monoforce.ros import poses_to_marker, poses_to_path
from nav_msgs.msg import Path
from ros_numpy import numpify
from sensor_msgs.msg import PointCloud2
import rospkg
from std_msgs.msg import Float32MultiArray
from visualization_msgs.msg import MarkerArray


class DiffPhysics:
    def __init__(self, dphys_cfg: DPhysConfig,
                 hm_topic='/height_map',
                 hm_frame='base_link',
                 robot='tradr',
                 robot_clearance=0.0,
                 linear_vels=[1.],
                 angular_vels=[0.],
                 max_age=0.5):
        self.robot = robot
        self.robot_clearance = robot_clearance
        self.dphys_cfg = dphys_cfg
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        self.hm_frame = hm_frame
        self.linear_vels = linear_vels
        self.angular_vels = angular_vels
        self.max_age = max_age

        # paths publisher
        self.sampled_paths_pub = rospy.Publisher('/sampled_paths', MarkerArray, queue_size=1)
        # lower cost path publisher
        self.lc_path_pub = rospy.Publisher('/lower_cost_path', Path, queue_size=1)
        self.path_costs_pub = rospy.Publisher('/path_costs', Float32MultiArray, queue_size=1)

        # image subscriber
        self.hm_sub = rospy.Subscriber(hm_topic, PointCloud2, self.hm_callback)

    def hm_callback(self, msg):
        assert isinstance(msg, PointCloud2)
        # if message is stale do not process it
        dt = rospy.Time.now() - msg.header.stamp
        if dt.to_sec() > self.max_age:
            rospy.logwarn(f'Stale height map message received ({dt.to_sec():.1f} > {self.max_age} [sec]), skipping')
            return

        height = numpify(msg)['z']
        h = w = int(2 * self.dphys_cfg.d_max / self.dphys_cfg.grid_res)
        height = height.reshape((h, w))
        height = height.T
        rospy.loginfo('Received height map of shape: %s' % str(height.shape))

        # predict path
        with torch.no_grad():
            self.predict_paths(height, linear_vels=self.linear_vels, angular_vels=self.angular_vels)

    def path_cost(self, states):
        assert isinstance(states, list)
        assert len(states) == 5
        xyz, Rs, linear_v, angular_w, forces = states
        # path cost as a sum of force magnitudes
        assert forces.ndim == 3  # (n_samples, 3, n_points)
        # reduce forces acting on all robot points
        forces = forces.sum(dim=2)
        assert forces.shape[1] == 3
        cost = forces.norm(dim=1).mean()
        return cost

    def predict_paths(self, height, linear_vels=None, angular_vels=None, pose_step=50):
        if angular_vels is None:
            angular_vels = [0.]
        if linear_vels is None:
            linear_vels = [1.]
        assert isinstance(height, np.ndarray)
        assert height.shape[0] == height.shape[1]
        assert isinstance(linear_vels, list)
        assert isinstance(angular_vels, list)
        assert len(linear_vels) == len(angular_vels)

        tt = torch.linspace(0., self.dphys_cfg.total_sim_time, self.dphys_cfg.n_samples)
        # paths marker array
        marker_array = MarkerArray()
        path_id = 0
        lower_cost_poses = None
        max_path_cost = torch.tensor(-np.inf, device=self.device)
        min_path_cost = torch.tensor(np.inf, device=self.device)
        path_costs = []
        for v, w in zip(linear_vels, angular_vels):
            # controls
            vs = v * torch.ones(self.dphys_cfg.n_samples)
            ws = w * torch.ones(self.dphys_cfg.n_samples)
            controls = {'stamps': tt, 'linear_v': vs, 'angular_w': ws}

            # predict states
            states, _ = dphysics(height, controls, robot_model=self.robot, dphys_cfg=self.dphys_cfg, device=self.device)

            # create path message (Marker)
            xyz = states[0][::pose_step].cpu().numpy()
            Rs = states[1][::pose_step].cpu().numpy()
            Ts = np.zeros((len(xyz), 4, 4))
            Ts[:, :3, :3] = Rs
            Ts[:, :3, 3:4] = xyz
            Ts[:, 3, 3] = 1.
            # add robot clearance
            Ts[:, 2, 3] += self.robot_clearance

            # compute path cost
            path_cost = self.path_cost(states)
            path_costs.append(path_cost.item())
            # rospy.logdebug('Path cost: %.3f' % path_cost.item())
            if path_cost > max_path_cost:
                max_path_cost = path_cost.clone()
            if path_cost < min_path_cost:
                min_path_cost = path_cost.clone()
                lower_cost_poses = Ts.copy()

            marker_msg = poses_to_marker(Ts)
            marker_msg.header.frame_id = self.hm_frame
            marker_msg.ns = 'paths'
            marker_msg.id = path_id
            path_id += 1
            marker_array.markers.append(marker_msg)

        red = np.array([1., 0., 0.])
        green = np.array([0., 1., 0.])
        path_costs_norm = torch.tensor(path_costs, device=self.device)
        path_costs_norm = (path_costs_norm - min_path_cost) / (max_path_cost - min_path_cost)
        stamp = rospy.Time.now()
        for marker_msg in marker_array.markers:
            # set time stamps
            marker_msg.header.stamp = stamp
            # map path cost to color (lower cost -> greener, higher cost -> redder)
            path_cost = path_costs_norm[marker_msg.id].item()
            color = (1. - path_cost) * green + path_cost * red
            marker_msg.color.r = color[0]
            marker_msg.color.g = color[1]
            marker_msg.color.b = color[2]
            marker_msg.color.a = 1.0

        # publish all sampled paths
        self.sampled_paths_pub.publish(marker_array)
        # publish lower cost path
        if lower_cost_poses is not None:
            rospy.loginfo('Publishing lower cost path of length: %d' % len(lower_cost_poses))
            path_msg = poses_to_path(lower_cost_poses, stamp=stamp, frame_id=self.hm_frame)
            self.lc_path_pub.publish(path_msg)

        # publish path costs
        path_costs_msg = Float32MultiArray()
        path_costs_msg.data = path_costs
        self.path_costs_pub.publish(path_costs_msg)

    @staticmethod
    def spin():
        try:
            rospy.spin()
        except rospy.ROSInterruptException:
            pass


def main():
    rospy.init_node('diff_physics', anonymous=True)
    pkg_path = rospkg.RosPack().get_path('monoforce')

    dphys_cfg = DPhysConfig()
    config_path = rospy.get_param('~config_path', os.path.join(pkg_path, 'config/dphys_cfg.yaml'))
    assert os.path.isfile(config_path), 'Config file %s does not exist' % config_path
    dphys_cfg.from_yaml(config_path)
    dphys_cfg.total_sim_time = rospy.get_param('~total_sim_time', 5.)
    dphys_cfg.n_samples = 100 * int(dphys_cfg.total_sim_time)

    robot = rospy.get_param('~robot', 'tradr')
    robot_clearance = rospy.get_param('~robot_clearance', 0.0)

    hm_topic = rospy.get_param('~hm_topic')
    hm_frame = rospy.get_param('~hm_frame')
    # control parameters
    linear_vels = rospy.get_param('~linear_vels', [1.])
    angular_vels = rospy.get_param('~angular_vels', [0.])
    # max time to wait for a message before it is considered stale
    max_age = rospy.get_param('~max_age', 0.5)

    node = DiffPhysics(dphys_cfg=dphys_cfg,
                       robot=robot, robot_clearance=robot_clearance,
                       hm_topic=hm_topic, hm_frame=hm_frame,
                       linear_vels=linear_vels, angular_vels=angular_vels,
                       max_age=max_age)
    node.spin()


if __name__ == '__main__':
    main()
