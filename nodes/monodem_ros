#!/usr/bin/env python

import os
import torch
import numpy as np
import cv2
import rospy
from cv_bridge import CvBridge
from grid_map_msgs.msg import GridMap
from monoforce.config import Config
from monoforce.models import RigidBodySoftTerrain, State
from monoforce.models.monolayout import load_monodem
from monoforce.ros import height_map_to_point_cloud_msg, height_map_to_gridmap_msg, to_marker, to_path
from monoforce.utils import normalize
from nav_msgs.msg import Path
from sensor_msgs.msg import Image, CompressedImage, PointCloud2
import rospkg
from time import time
from scipy.ndimage import rotate
from visualization_msgs.msg import MarkerArray


pkg_path = rospkg.RosPack().get_path('monoforce')

class MonoDEM:
    def __init__(self, cfg: Config,
                 model_name=None,
                 hm_frame='base_link',
                 img_topic='/camera/image_raw/compressed'):
        self.cfg = cfg
        self.model_name = model_name
        rospy.loginfo('Loading model %s' % self.model_name)
        self.load_model()
        self.hm_frame = hm_frame

        # cv bridge
        self.cv_bridge = CvBridge()
        # height map publisher
        self.hm_img_pub = rospy.Publisher('/height_map/image', Image, queue_size=1)
        # point cloud publisher
        self.hm_cloud_pub = rospy.Publisher('/height_map/points', PointCloud2, queue_size=1)
        # grid map publisher
        self.hm_grid_pub = rospy.Publisher('/grid_map', GridMap, queue_size=1)

        # image subscriber
        self.img_sub = rospy.Subscriber(img_topic, CompressedImage, self.img_callback)

    def load_model(self):
        if self.model_name == 'monolayout':
            self.models = load_monodem(encoder_path=os.path.join(pkg_path, 'config/weights/monolayout/encoder.pth'),
                                       decoder_path=os.path.join(pkg_path, 'config/weights/monolayout/decoder.pth'),
                                       cfg=self.cfg)
        else:
            pass

    def preprocess_img(self, img_raw):
        # resize image
        H_raw, W_raw = img_raw.shape[:2]
        h, w = self.cfg.img_size
        img = cv2.resize(img_raw, (int(h / H_raw * W_raw), h))
        # crop image
        H, W = img.shape[:2]
        img = img[H - h:H, W // 2 - w // 2: W // 2 + w // 2]
        # transpose image
        img = img.transpose((2, 0, 1))  # (H, W, C) -> (C, H, W)
        return img

    def monolayout_inference(self, img):
        with torch.no_grad():
            img_tensor = torch.from_numpy(img).unsqueeze(0)
            features = self.models['encoder'](img_tensor)
            height_pred = self.models['decoder'](features, is_training=True)
        height_pred = height_pred.squeeze().cpu().numpy()

        return height_pred

    def img_callback(self, msg):
        # if message is stale do not process it
        dt = rospy.Time.now() - msg.header.stamp
        if dt > rospy.Duration(1.):
            rospy.logdebug(f'Stale image message received ({dt.to_sec():.1f} [sec]), skipping')
            return

        t0 = time()
        img = self.cv_bridge.compressed_imgmsg_to_cv2(msg)
        img = self.preprocess_img(img)
        height = self.monolayout_inference(img)
        rospy.logdebug('Predicted height map shape: %s' % str(height.shape))
        rospy.logdebug('MonoDem inference time: %.3f' % (time() - t0))

        # publish height map as image
        height_uint8 = np.asarray(255 * normalize(height), dtype='uint8')
        img_msg = self.cv_bridge.cv2_to_imgmsg(height_uint8, encoding='mono8')
        img_msg.header.stamp = msg.header.stamp
        img_msg.header.frame_id = self.hm_frame
        self.hm_img_pub.publish(img_msg)

        # rotate height map by 180 degrees
        height = rotate(height, 180)

        # publish height map as point cloud
        t1 = time()
        height = height.T
        h, w = np.asarray(height.shape) * self.cfg.grid_res
        cloud_msg = height_map_to_point_cloud_msg(height, self.cfg.grid_res,
                                                  xyz=np.array([h / 2., 0., 0.]), q=np.array([0., 0., 0., 1.]))
        cloud_msg.header.stamp = msg.header.stamp
        cloud_msg.header.frame_id = self.hm_frame
        self.hm_cloud_pub.publish(cloud_msg)

        # publish height map as grid map
        grid_msg = height_map_to_gridmap_msg(height, self.cfg.grid_res,
                                             xyz=np.array([h / 2., 0., 0.]), q=np.array([0., 0., 0., 1.]))
        grid_msg.info.header.stamp = msg.header.stamp
        grid_msg.info.header.frame_id = self.hm_frame
        self.hm_grid_pub.publish(grid_msg)
        rospy.logdebug('Height map publishing took %.3f' % (time() - t1))


def main():
    rospy.init_node('monodem', anonymous=True, log_level=rospy.DEBUG)

    cfg = Config()
    cfg.grid_res = 0.1
    cfg.device = 'cuda'
    cfg.d_max = 12.8
    cfg.d_min = 1.
    cfg.img_size = (512, 512)

    img_topic = rospy.get_param('~img_topic')
    hm_frame = rospy.get_param('~hm_frame')
    try:
        node = MonoDEM(cfg=cfg, model_name='monolayout', img_topic=img_topic, hm_frame=hm_frame)
        rospy.spin()
    except rospy.ROSInterruptException:
        pass


if __name__ == '__main__':
    main()
