#!/usr/bin/env python

import torch
from torch.utils.data import ConcatDataset
from monoforce.models.lss.model import compile_model
from monoforce.datasets.data import OmniDemData, explore_data
from monoforce.config import Config
from monoforce.datasets import seq_paths
from monoforce.models.lss.tools import MSELoss
from tqdm import tqdm


def eval():
    cfg = Config()
    cfg.d_min = 0.6
    cfg.d_max = 6.4
    cfg.grid_res = 0.1
    cfg.h_above_lidar = 0.3
    cfg.device = torch.device('cuda:0')

    bsz = 2
    nworkers = 10

    modelf = '../config/weights/lss/lss11.pt'

    grid_conf = {
        'xbound': [-cfg.d_max, cfg.d_max, cfg.grid_res],
        'ybound': [-cfg.d_max, cfg.d_max, cfg.grid_res],
        'zbound': [-2.0, 2.0, 4.0],
        'dbound': [cfg.d_min, cfg.d_max, cfg.grid_res],
    }

    data_aug_conf = {
                    'resize_lim': (0.193, 0.225),
                    'final_dim': (128, 352),
                    'rot_lim': (-5.4, 5.4),
                    # 'H': 1200, 'W': 1920,
                    'H': 1536, 'W': 2048,
                    'rand_flip': False,
                    'bot_pct_lim': (0.0, 0.22),
                    'cams': ['CAM_FRONT', 'CAM_REAR', 'CAM_RIGHT', 'CAM_LEFT'],
                    'Ncams': 4,
                }

    all_seqs_mean_loss = 0.0
    for val_ds_path in seq_paths:
        # explore_data(val_ds_path, grid_conf, data_aug_conf, cfg, save=False)

        val_ds = OmniDemData(val_ds_path, is_train=False, data_aug_conf=data_aug_conf, cfg=cfg)
        valloader = torch.utils.data.DataLoader(val_ds, batch_size=bsz, shuffle=False, num_workers=nworkers)

        model = compile_model(grid_conf, data_aug_conf, outC=1)
        print('loading', modelf)
        model.load_state_dict(torch.load(modelf))
        model.to(cfg.device)
        model.eval()

        loss_fn = MSELoss()

        # validation epoch
        with torch.no_grad():
            val_loss = 0.0
            for batchi, (imgs, rots, trans, intrins, post_rots, post_trans, heightmap)\
                    in tqdm(enumerate(valloader), total=len(valloader)):
                preds = model(imgs.to(cfg.device),
                              rots.to(cfg.device),
                              trans.to(cfg.device),
                              intrins.to(cfg.device),
                              post_rots.to(cfg.device),
                              post_trans.to(cfg.device),
                              )
                heightmap = heightmap.to(cfg.device)
                loss = loss_fn(preds, heightmap)
                val_loss += loss.item()
            val_loss /= len(valloader)

        print(f'For seq {val_ds_path.split("/")[-1]} Validation loss: {val_loss:.3f}')
        all_seqs_mean_loss += val_loss
    all_seqs_mean_loss /= len(seq_paths)
    print(f'Average validation loss: {all_seqs_mean_loss:.3f}')


def main():
    cfg = Config()
    cfg.d_min = 0.6
    cfg.d_max = 6.4
    cfg.grid_res = 0.1
    cfg.h_above_lidar = 0.3

    grid_conf = {
        'xbound': [-cfg.d_max, cfg.d_max, cfg.grid_res],
        'ybound': [-cfg.d_max, cfg.d_max, cfg.grid_res],
        'zbound': [-2.0, 2.0, 4.0],
        'dbound': [cfg.d_min, cfg.d_max, cfg.grid_res],
    }

    data_aug_conf = {
        'resize_lim': (0.193, 0.225),
        'final_dim': (128, 352),
        'rot_lim': (-5.4, 5.4),
        'H': 1200, 'W': 1920,
        'rand_flip': False,
        'bot_pct_lim': (0.0, 0.22),
        'cams': ['CAM_FRONT', 'CAM_REAR', 'CAM_RIGHT', 'CAM_LEFT',],
        'Ncams': 4,
    }

    eval()
    # explore_data(seq_paths[2], grid_conf, data_aug_conf, cfg, save=False)


if __name__ == '__main__':
    main()
