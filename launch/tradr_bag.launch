<?xml version="1.0" encoding="UTF-8" ?>

<launch>
    <arg name="rviz" default="false" doc="Launch RViz for data visualization or not"/>
    <arg name="rate" default="1." doc="Playback rate"/>
    <arg name="delay" default="3.0" doc="Delay in the bag file [sec]"/>
    <arg name="start" default="0." doc="Start moment in a bag file [sec]"/>
    <arg name="debayer" default="false" doc="Debayer images or not"/>
    <arg name="split_omni" default="true" doc="Split omni camera topic to separate images or not"/>
    <arg name="record" default="false" doc="Record new bag file with image and deskewed point cloud topics or not"/>
    <arg name="bag" default="$(dirname)/../data/robingas/data/22-10-20-unhost/ugv_2022-10-20-14-05-42.bag"/>
<!--     <arg name="bag" default="$(dirname)/../data/robingas/data/22-10-20-unhost/ugv_2022-10-20-14-30-57.bag"/> -->

    <arg name="params" default="$(eval bag.split()[0] + '.params')"/>
    <rosparam command="load" file="$(arg params)"/>
    <param name="use_sim_time" value="true"/>

    <!-- Workaround for /tf_static problems with rosbag: https://github.com/ros/geometry2/issues/181 -->
    <node name="play_tf_static" pkg="dataproc" type="play_tf_static"
         args="$(arg bag)" output="log">
        <remap from="~tf_static" to="/tf_static"/>
    </node>

    <!--Bag file player -->
    <node name="rosbag_play" pkg="rosbag" type="play"
          args="--clock --delay $(arg delay) --rate $(arg rate) --start $(arg start) $(arg bag)">
        <remap from="os_cloud_node/destaggered_points" to="points"/>
        <remap from="points_filtered_kontron" to="points"/>

        <remap from="/camera_front_resync/image_color/compressed" to="/camera_front/image_color/compressed"/>
        <remap from="/camera_left_resync/image_color/compressed" to="/camera_left/image_color/compressed"/>
        <remap from="/camera_rear_resync/image_color/compressed" to="/camera_rear/image_color/compressed"/>
        <remap from="/camera_right_resync/image_color/compressed" to="/camera_right/image_color/compressed"/>

        <remap from="/camera_front_resync/camera_info" to="/camera_front/camera_info"/>
        <remap from="/camera_left_resync/camera_info" to="/camera_left/camera_info"/>
        <remap from="/camera_rear_resync/camera_info" to="/camera_rear/camera_info"/>
        <remap from="/camera_right_resync/camera_info" to="/camera_right/camera_info"/>
    </node>

    <!-- Omni camera to separate images -->
    <group if="$(arg split_omni)" ns="viz" clear_params="false">
      <!-- TRADR image topics remapping -->
      <remap from="camera_4/image/compressed" to="/camera_front/image_color/compressed"/>
      <remap from="camera_0/image/compressed" to="/camera_right/image_color/compressed"/>
      <remap from="camera_1/image/compressed" to="/camera_rear_right/image_color/compressed"/>
      <remap from="camera_2/image/compressed" to="/camera_rear_left/image_color/compressed"/>
      <remap from="camera_3/image/compressed" to="/camera_left/image_color/compressed"/>
      <remap from="camera_5/image/compressed" to="/camera_up/image_color/compressed"/>
      <!-- TRADR camera info topics remapping -->
      <remap from="camera_4/camera_info" to="/camera_front/camera_info"/>
      <remap from="camera_0/camera_info" to="/camera_right/camera_info"/>
      <remap from="camera_1/camera_info" to="/camera_rear_right/camera_info"/>
      <remap from="camera_2/camera_info" to="/camera_rear_left/camera_info"/>
      <remap from="camera_3/camera_info" to="/camera_left/camera_info"/>
      <remap from="camera_5/camera_info" to="/camera_up/camera_info"/>
    
      <!-- Images need to be republished as raw ones first, probably due to https://code.ros.org/trac/ros-pkg/ticket/4794 -->
      <node name="republish" pkg="image_transport" type="republish" args="compressed raw">
        <remap from="in"  to="omnicam/image" />
        <remap from="out" to="omnicam/image" />
      </node>
      <node name="omnicamera_nodelet_manager" pkg="nodelet" type="nodelet" args="manager" output="screen">
        <param name="num_worker_threads" value="12" type="int" />
      </node>
      <include file="$(find omnicamera)/launch/load_lady_saw.launch" />
    </group>

    <!-- Debayering images with image_proc -->
    <group if="$(arg debayer)">
        <group ns="camera_front">
            <node name="debayer" pkg="nodelet" type="nodelet" args="standalone image_proc/debayer" respawn="false" output="screen">
                 <param name="image_transport" value="compressed"/>
            </node>
        </group>
        <group ns="camera_left">
            <node name="debayer" pkg="nodelet" type="nodelet" args="standalone image_proc/debayer" respawn="false" output="screen">
                 <param name="image_transport" value="compressed"/>
            </node>
        </group>
        <group ns="camera_rear">
            <node name="debayer" pkg="nodelet" type="nodelet" args="standalone image_proc/debayer" respawn="false" output="screen">
                 <param name="image_transport" value="compressed"/>
            </node>
        </group>
        <group ns="camera_right">
            <node name="debayer" pkg="nodelet" type="nodelet" args="standalone image_proc/debayer" respawn="false" output="screen">
                 <param name="image_transport" value="compressed"/>
            </node>
        </group>
    </group>

    <!-- Rectifying images with image_proc -->
    <group>
        <group ns="camera_front">
            <node name="rectify" pkg="nodelet" type="nodelet" args="standalone image_proc/rectify" respawn="false" output="screen">
                 <param name="image_transport" value="compressed"/>
                 <remap from="image_mono" to="image_color"/>
            </node>
        </group>
        <group ns="camera_left">
            <node name="rectify" pkg="nodelet" type="nodelet" args="standalone image_proc/rectify" respawn="false" output="screen">
                 <param name="image_transport" value="compressed"/>
                 <remap from="image_mono" to="image_color"/>
            </node>
        </group>
        <group ns="camera_rear">
            <node name="rectify" pkg="nodelet" type="nodelet" args="standalone image_proc/rectify" respawn="false" output="screen">
                 <param name="image_transport" value="compressed"/>
                 <remap from="image_mono" to="image_color"/>
            </node>
        </group>
        <group ns="camera_right">
            <node name="rectify" pkg="nodelet" type="nodelet" args="standalone image_proc/rectify" respawn="false" output="screen">
                 <param name="image_transport" value="compressed"/>
                 <remap from="image_mono" to="image_color"/>
            </node>
        </group>
        <group ns="camera_rear_left">
            <node name="rectify" pkg="nodelet" type="nodelet" args="standalone image_proc/rectify" respawn="false" output="screen">
                 <param name="image_transport" value="compressed"/>
                 <remap from="image_mono" to="image_color"/>
            </node>
        </group>
        <group ns="camera_rear_right">
            <node name="rectify" pkg="nodelet" type="nodelet" args="standalone image_proc/rectify" respawn="false" output="screen">
                 <param name="image_transport" value="compressed"/>
                 <remap from="image_mono" to="image_color"/>
            </node>
        </group>
        <group ns="camera_up">
            <node name="rectify" pkg="nodelet" type="nodelet" args="standalone image_proc/rectify" respawn="false" output="screen">
                 <param name="image_transport" value="compressed"/>
                 <remap from="image_mono" to="image_color"/>
            </node>
        </group>
    </group>

     <!-- Point cloud deskewing -->
    <node name="pcl_deskew_node" pkg="pointcloud_motion_deskew" type="pointcloud2_deskew_node" output="screen" >
        <remap from="input_point_cloud" to="points" />
        <remap from="output_point_cloud" to="points_deskewed" />
	</node>

    <!-- Visualization -->
    <node if="$(arg rviz)" name="rviz" pkg="rviz" type="rviz"
          args="-d $(dirname)/../config/rviz/tradr.rviz"/>

    <!-- Record new bag file with image topic -->
    <node if="$(arg record)" pkg="rosbag" type="record" name="rosbag_record_images"
          args="/camera_front/image_rect/compressed
                /camera_left/image_rect/compressed
                /camera_rear/image_rect/compressed
                /camera_right/image_rect/compressed
                /camera_rear_right/image_rect/compressed
                /camera_rear_left/image_rect/compressed
                /camera_right/image_rect/compressed
                /camera_up/image_rect/compressed

                /camera_front/camera_info
                /camera_left/camera_info
                /camera_rear/camera_info
                /camera_right/camera_info
                /camera_rear_right/camera_info
                /camera_rear_left/camera_info
                /camera_right/camera_info
                /camera_up/camera_info

                -O $(arg bag)_images.bag"/>
    <!-- Record new bag file with deskewed points topic -->
    <node if="$(arg record)" pkg="rosbag" type="record" name="rosbag_record_points"
          args="/points_deskewed
                -O $(arg bag)_points.bag"/>
</launch>
