#!/usr/bin/env python

import os
import numpy as np
import rospy
from numpy.lib.recfunctions import unstructured_to_structured
from monoforce.datasets import DEMTrajData, OptDEMTrajData, seq_paths
from monoforce.cloudproc import position
from monoforce.config import Config
from monoforce.ros import height_map_to_gridmap_msg, to_path
from nav_msgs.msg import Path
from sensor_msgs.msg import PointCloud2
from grid_map_msgs.msg import GridMap
from ros_numpy import numpify, msgify


def main():
    rospy.init_node('data_vis', anonymous=True, log_level=rospy.DEBUG)
    cfg = Config()
    cfg.from_rosparams(node_name='data_vis')
    rate = rospy.get_param('~rate', 1)
    opt_terrain = rospy.get_param('~opt_terrain', False)

    # Load traversability data
    path = np.random.choice(seq_paths)
    assert os.path.exists(path)
    Data = OptDEMTrajData if opt_terrain else DEMTrajData
    ds = Data(path, cfg=cfg)
    rospy.loginfo('Loaded dataset with %d samples from path: %s' % (len(ds), path))

    # Choose data sample
    i = np.random.choice(range(len(ds)))
    rospy.loginfo('Using sample %d' % i)
    cloud, traj, height = ds[i]
    poses = traj['poses']
    points = position(cloud)

    # publishing of the data
    gm_pub = rospy.Publisher('grid_map', GridMap, queue_size=1)
    cloud_pub = rospy.Publisher('cloud', PointCloud2, queue_size=1)
    path_pub = rospy.Publisher('path', Path, queue_size=1)

    frame = 'base_link'
    rate = rospy.Rate(rate)
    while not rospy.is_shutdown():
        stamp = rospy.Time.now()

        # point cloud
        points = np.asarray(points, dtype='float32')
        cloud_struct = unstructured_to_structured(points, names=['x', 'y', 'z'])
        cloud_msg = msgify(PointCloud2, cloud_struct)
        cloud_msg.header.frame_id = frame
        cloud_msg.header.stamp = stamp

        # grid map
        grid_msg = height_map_to_gridmap_msg(height['z'], grid_res=cfg.grid_res)
        grid_msg.info.header.frame_id = frame
        grid_msg.info.header.stamp = stamp

        # path
        path_msg = to_path(poses, frame_id=frame, stamp=stamp)

        cloud_pub.publish(cloud_msg)
        gm_pub.publish(grid_msg)
        path_pub.publish(path_msg)

        rospy.logdebug('Published data')
        rate.sleep()


if __name__ == '__main__':
    main()
