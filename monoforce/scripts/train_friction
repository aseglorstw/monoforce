#!/usr/bin/env python

import os
import torch
from torch.utils.data import DataLoader
from torch.utils.tensorboard import SummaryWriter
from tqdm import tqdm
import matplotlib.pyplot as plt
import numpy as np
from monoforce.models.dphysics import DPhysics
from monoforce.config import DPhysConfig
from monoforce.utils import read_yaml
from monoforce.models.terrain_encoder.lss import load_model
from monoforce.utils import compile_data
from monoforce.models.terrain_encoder.utils import denormalize_img


# Set random seed for reproducibility
torch.manual_seed(42)
np.random.seed(42)

# Training parameters
batch_size = 64
num_epochs = 1000
lr = 1e-4
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
robot = 'tradr2'
small_data = False


def monoforce_forward(img_data, controls, lss, dphysics):
    # terrain encoder forward pass
    with torch.no_grad():
        voxel_feats = lss.get_voxels(*img_data)
        hm_feats = lss.bevencode.backbone(voxel_feats)
        height_pred_geom = lss.bevencode.up_geom(hm_feats)
        height_pred_diff = lss.bevencode.up_diff(hm_feats)
    friction_pred = lss.bevencode.up_friction(hm_feats)

    # predict states with differentiable physics
    states_pred, _ = dphysics(z_grid=height_pred_geom.squeeze(1),
                              controls=controls,
                              friction=friction_pred.squeeze(1))

    return height_pred_geom, height_pred_diff, friction_pred, states_pred


def main():
    # load configs: Differentiable Physics
    dphys_cfg = DPhysConfig()
    dphys_config_path = '../config/dphys_cfg.yaml'
    assert os.path.isfile(dphys_config_path), 'Config file %s does not exist' % dphys_config_path
    dphys_cfg.from_yaml(dphys_config_path)

    # load configs: LSS (Terrain Encoder)
    lss_config_path = f'../config/lss_cfg_{robot}.yaml'
    assert os.path.isfile(lss_config_path), 'LSS config file %s does not exist' % lss_config_path
    lss_cfg = read_yaml(lss_config_path)
    pretrained_model_path = f'../config/weights/lss/lss_robingas_{robot}.pt'

    # Load Differentiable Physics
    dphysics = DPhysics(dphys_cfg, device=device)

    # Load LSS (Terrain Encoder)
    terrain_encoder = load_model(modelf=pretrained_model_path, lss_cfg=lss_cfg, device=device)
    terrain_encoder.to(device)

    # Load dataset
    train_ds, val_ds = compile_data(dataset='robingas',
                                    robot=robot,
                                    lss_cfg=lss_cfg,
                                    dphys_cfg=dphys_cfg,
                                    small_data=small_data)
    print('Train dataset:', len(train_ds))
    print('Validation dataset:', len(val_ds))

    # Create dataloaders
    train_dl = DataLoader(train_ds, batch_size=batch_size, shuffle=True)
    val_dl = DataLoader(val_ds, batch_size=batch_size, shuffle=False)

    # Training: Friction Head only
    # https://discuss.pytorch.org/t/how-to-train-a-part-of-a-network/8923/2
    for p in terrain_encoder.parameters():
        p.requires_grad = False
    for p in terrain_encoder.bevencode.up_friction.parameters():
        p.requires_grad = True
    optimizer = torch.optim.Adam(terrain_encoder.bevencode.up_friction.parameters(), lr=lr)

    # tensorboard writer
    log_dir = f'../config/tb_runs/lss_robingas_{robot}_friction'
    os.makedirs(log_dir, exist_ok=True)
    writer = SummaryWriter(log_dir=log_dir)
    counter = 0

    # train loop
    loss_min = np.inf
    for epoch in range(num_epochs):
        # epoch loop
        terrain_encoder = terrain_encoder.train()
        loss_epoch = 0
        for batch in tqdm(train_dl, total=len(train_dl)):
            batch = [b.to(device) for b in batch]

            # unpack batch
            (imgs, rots, trans, intrins, post_rots, post_trans,
             hm_geom, hm_terrain,
             control_ts, controls,
             traj_ts, Xs, Xds, Rs, Omegas) = batch
            # monoforce inputs
            img_data = [imgs, rots, trans, intrins, post_rots, post_trans]

            # forward pass
            height_pred_geom, height_pred_diff, friction_pred, states_pred = monoforce_forward(img_data, controls, terrain_encoder, dphysics)

            # unpack states
            Xs_pred, Xds_pred, Rs_pred, Omegas_pred, _ = states_pred

            # find the closest timesteps in the trajectory to the ground truth timesteps
            ts_ids = torch.argmin(torch.abs(control_ts.unsqueeze(1) - traj_ts.unsqueeze(2)), dim=2)

            # compute the loss as the mean squared error between the predicted and ground truth poses
            loss = torch.nn.functional.mse_loss(Xs_pred[torch.arange(Xs_pred.shape[0]).unsqueeze(1), ts_ids], Xs)

            # tensorboard
            writer.add_scalar('Train loss (iter)', loss.item(), counter)
            counter += 1

            # accumulate loss
            loss_epoch += loss.item()

            # backpropagate
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

        # print epoch loss
        loss_epoch /= len(train_dl)
        print('Train epoch:', epoch, 'Mean loss:', loss_epoch)
        writer.add_scalar('Mean train loss (epoch)', loss_epoch, epoch)

        # save model if loss is minimum
        if loss_epoch < loss_min:
            loss_min = loss_epoch
            print('Saving model...')
            torch.save(terrain_encoder.state_dict(), os.path.join(log_dir, 'lss.pt'))

        # evaluate model and visualize predictions
        with torch.no_grad():
            # evaluate model
            terrain_encoder = terrain_encoder.eval()

            # validation data sample
            batch_val = next(iter(val_dl))
            batch_val = [b.to(device) for b in batch_val]

            # unpack batch
            (imgs, rots, trans, intrins, post_rots, post_trans,
             hm_geom, hm_terrain,
             control_ts, controls,
             traj_ts, Xs, Xds, Rs, Omegas) = batch_val
            # monoforce inputs
            img_data = [imgs, rots, trans, intrins, post_rots, post_trans]

            # forward pass
            height_pred_geom, height_pred_diff, friction_pred, states_pred = monoforce_forward(img_data, controls, terrain_encoder, dphysics)
            # print('Heightmap mean:', height_pred_geom.mean().item(), 'Friction mean:', friction_pred.mean().item())

            # unpack states
            Xs_pred, Xds_pred, Rs_pred, Omegas_pred, _ = states_pred

            # find the closest timesteps in the trajectory to the ground truth timesteps
            ts_ids = torch.argmin(torch.abs(control_ts.unsqueeze(1) - traj_ts.unsqueeze(2)), dim=2)

            # compute the loss as the mean squared error between the predicted and ground truth poses
            loss_val = torch.nn.functional.mse_loss(Xs_pred[torch.arange(Xs_pred.shape[0]).unsqueeze(1), ts_ids], Xs)
            print('Validation sample Loss:', loss_val.item())
            writer.add_scalar('Validation loss (epoch)', loss_val.item(), epoch)

            # visualize
            fig = plt.figure(figsize=(20, 4))
            plt.subplot(1, 5, 1)
            plt.imshow(denormalize_img(imgs[0, 0]))
            plt.title('Input Image')
            plt.axis('off')

            plt.subplot(1, 5, 2)
            plt.imshow(height_pred_geom[0, 0].cpu().numpy().T,  origin='lower', vmin=-1, vmax=1, cmap='jet')
            plt.colorbar()
            plt.title('Predicted Heightmap')

            plt.subplot(1, 5, 3)
            plt.imshow(hm_geom[0, 0].cpu().numpy().T, origin='lower', vmin=-1, vmax=1, cmap='jet')
            plt.colorbar()
            plt.title('Ground Truth Heightmap')

            plt.subplot(1, 5, 4)
            plt.imshow(friction_pred[0, 0].cpu().numpy(), origin='lower', vmin=0, vmax=1, cmap='jet')
            plt.colorbar()
            plt.title('Predicted Friction')

            plt.subplot(1, 4, 4)
            plt.plot(Xs[0, :, 0].cpu().numpy(), Xs[0, :, 1].cpu().numpy(), 'r', label='GT poses')
            plt.plot(Xs_pred[0, :, 0].cpu().numpy(), Xs_pred[0, :, 1].cpu().numpy(), 'b', label='Pred poses')
            plt.grid()
            plt.axis('equal')
            plt.legend()
            plt.title('Trajectory')

            # tensorboard
            writer.add_figure('Validation sample', fig, epoch)


if __name__ == '__main__':
    main()
