#!/usr/bin/env python

import rosbag
import message_filters
from sensor_msgs.msg import Image, CameraInfo

class StereoData:
    def __init__(self, l_img, r_img, l_info, r_info):
        self.image_l = l_img
        self.image_r = r_img
        self.cam_info_l = l_info
        self.cam_info_r = r_info

class BagSubscriber(message_filters.SimpleFilter):
    def new_message(self, msg):
        self.signal_message(msg)

def callback(l_img, r_img, l_info, r_info):
    sd = StereoData(l_img, r_img, l_info, r_info)
    stereo_dataset.append(sd)

def load_bag(filename):
    bag = rosbag.Bag(filename, 'r')

    l_cam = image_ns + "/left"
    r_cam = image_ns + "/right"
    l_cam_image = l_cam + "/image_raw"
    r_cam_image = r_cam + "/image_raw"
    l_cam_info = l_cam + "/camera_info"
    r_cam_info = r_cam + "/camera_info"

    topics = [l_cam_image, r_cam_image, l_cam_info, r_cam_info]
    view = rosbag.View(bag, topics=topics)

    l_img_sub = BagSubscriber()
    r_img_sub = BagSubscriber()
    l_info_sub = BagSubscriber()
    r_info_sub = BagSubscriber()

    sync = message_filters.TimeSynchronizer(l_img_sub, r_img_sub, l_info_sub, r_info_sub, queue_size=25)
    sync.registerCallback(callback)

    for _, msg, _ in view:
        topic = msg.topic
        if topic == l_cam_image or ("/" + topic == l_cam_image):
            l_img = msg
            l_img_sub.new_message(l_img)

        if topic == r_cam_image or ("/" + topic == r_cam_image):
            r_img = msg
            r_img_sub.new_message(r_img)

        if topic == l_cam_info or ("/" + topic == l_cam_info):
            l_info = msg
            l_info_sub.new_message(l_info)

        if topic == r_cam_info or ("/" + topic == r_cam_info):
            r_info = msg
            r_info_sub.new_message(r_info)

    bag.close()

# Assuming stereo_dataset is a global variable
stereo_dataset = []
image_ns = "/your/image/namespace"
load_bag("/path/to/your/bagfile.bag")
