#!/usr/bin/env python

from time import time
import torch
import numpy as np
from threading import RLock
import rospy
from monoforce.ros import poses_to_marker, poses_to_path, gridmap_msg_to_numpy
from nav_msgs.msg import Path
from grid_map_msgs.msg import GridMap
from std_msgs.msg import Float32MultiArray
from visualization_msgs.msg import MarkerArray
from monoforce.models.dphysics_warp import DiffSim
from monoforce.utils import normalize
import warp as wp


# initialize warp
wp.init()


class DiffPhysicsWarp:
    def __init__(self,
                 gridmap_topic='/grid_map/terrain',
                 robot='tradr',
                 robot_size=(1.0, 0.5),
                 grid_res=0.1,
                 gridmap_dims=(12.8, 12.8),
                 n_sim_trajs=40,
                 max_age=0.5,
                 traj_sim_time=5.0,
                 linear_vel=0.5,
                 angular_vel_max=0.5,
                 allow_backward=True,
                 device='cpu'):
        self.robot = robot
        self.robot_size = robot_size
        self.dt = 0.001
        self.grid_res = grid_res
        self.n_sim_trajs = n_sim_trajs
        self.device = device
        self.gridmap_frame = None
        self.traj_sim_time = traj_sim_time
        self.n_sim_steps = int(self.traj_sim_time / self.dt)
        self.max_age = max_age
        self.path_lock = RLock()
        
        self.poses0 = self.init_poses()
        self.track_vels = self.init_controls(linear_vel, angular_vel_max, allow_backward)
        self.flipper_angles = self.init_flippers()
        height = np.zeros((int(gridmap_dims[0] / grid_res), int(gridmap_dims[1] / grid_res)), dtype=np.float32)
        self.simulator = self.init_simulator(height)

        # paths publisher
        self.sampled_paths_pub = rospy.Publisher('/sampled_paths', MarkerArray, queue_size=1)
        # lower cost path publisher
        self.lc_path_pub = rospy.Publisher('/lower_cost_path', Path, queue_size=1)
        self.path_costs_pub = rospy.Publisher('/path_costs', Float32MultiArray, queue_size=1)

        # height map subscriber
        self.gridmap_sub = rospy.Subscriber(gridmap_topic, GridMap, self.gridmap_callback)

    def init_poses(self):
        """
        Initialize robot poses.
        """
        poses0 = np.zeros((self.n_sim_trajs, 7))
        poses0[:, 2] = 0.2  # robot's initial z coordinate
        poses0[:, 6] = 1.0  # quaternion w
        return poses0

    def init_controls(self, linear_vel, angular_vel_max, allow_backward=True):
        """
        Initialize control commands through input linear and angular velocities.
        The differentiable drive robot model is used to calculate left and right 'track' (wheel) speed:
        v_r(t) = v(t) + r * w(t)
        v_l(t) = v(t) - r * w(t),

        where v(t) = V = const for t in [0 .. T], linear velocity,
        w(t) = [-W_max .. W_max], angular velocity.,
        T is trajectories time horizon.
        """
        T = self.n_sim_steps
        assert self.n_sim_trajs % 2 == 0, 'n_sim_trajs must be even'
        if allow_backward:
            vels = np.concatenate([-linear_vel * np.ones((self.n_sim_trajs // 2, T)),
                                   linear_vel * np.ones((self.n_sim_trajs // 2, T))])
        else:
            vels = linear_vel * np.ones((self.n_sim_trajs, T))
        omegas = np.concatenate([np.linspace(-angular_vel_max, angular_vel_max, self.n_sim_trajs // 2),
                                 np.linspace(-angular_vel_max, angular_vel_max, self.n_sim_trajs // 2)])

        track_vels = np.zeros((self.n_sim_trajs, T, 2))
        for i in range(self.n_sim_trajs):
            r = self.robot_size[1]
            v_r = vels[i] + r * omegas[i]
            v_l = vels[i] - r * omegas[i]
            track_vels[i, :, 0], track_vels[i, :, 1] = v_r, v_l

        return track_vels

    def init_flippers(self):
        """
        Initialize flipper angles.
        """
        flipper_angles = np.zeros((self.n_sim_trajs, self.n_sim_steps, 4))
        # flipper_angles[0, :, 0] = 0.5
        return flipper_angles

    def init_simulator(self, height):
        """
        Initialize simulator with given height map.
        """
        t_start = time()
        np_heights = [height for _ in range(self.n_sim_trajs)]
        res = [self.grid_res for _ in range(self.n_sim_trajs)]
        # create simulator
        simulator = DiffSim(np_heights, res, T=self.n_sim_steps, use_renderer=False, device=self.device)
        simulator.set_control(self.track_vels, self.flipper_angles)
        simulator.set_init_poses(self.poses0)
        rospy.logdebug('Simulator initialization took %.3f [sec]' % (time() - t_start))
        return simulator

    def gridmap_callback(self, msg):
        assert isinstance(msg, GridMap)
        # if message is stale do not process it
        dt = rospy.Time.now() - msg.info.header.stamp
        if dt.to_sec() > self.max_age:
            rospy.logwarn(f'Stale grid map message received ({dt.to_sec():.1f} > {self.max_age} [sec]), skipping')
            return
        if self.gridmap_frame is None:
            self.gridmap_frame = msg.info.header.frame_id

        # convert grid map to height map
        height = gridmap_msg_to_numpy(msg, 'elevation')
        assert height.ndim == 2, 'Height map must be 2D'
        rospy.loginfo('Received height map of shape: %s' % str(height.shape))

        # predict path
        with self.path_lock:
            xyz_q_np, path_costs = self.predict_paths(height, unfeasible_path_length=100.)

            # publish paths
            if xyz_q_np is not None:
                t_start = time()
                self.publish_paths(xyz_q_np, path_costs, stamp=rospy.Time.now())
                rospy.logdebug('Paths publishing took %.3f [sec]' % (time() - t_start))

    def predict_paths(self, height, unfeasible_path_length=np.inf):
        assert isinstance(height, np.ndarray)
        assert height.shape[0] == height.shape[1]
        
        # simulate trajectories
        t_start = time()
        heights = [height for _ in range(self.n_sim_trajs)]
        # TODO: does not work with CUDA, warp simulation breaks
        self.simulator.update_heightmaps(heights)
        xyz_q = self.simulator.simulate(render=False, use_graph=True if self.device == 'cuda' else False)
        rospy.loginfo('WARP Simulation took %.3f [sec]' % (time() - t_start))

        t_start = time()
        xyz_q_np = xyz_q.numpy()
        forces_np = self.simulator.body_f.numpy()
        rospy.logdebug('xyz_q: %s' % str(xyz_q_np.shape))
        rospy.logdebug('forces: %s' % str(forces_np.shape))
        assert xyz_q_np.shape == (self.n_sim_steps + 1, self.n_sim_trajs, 7)
        assert forces_np.shape == (self.n_sim_steps, self.n_sim_trajs, 6)

        # path with the smallest cost
        path_costs = (np.linalg.norm(forces_np[..., :3], axis=-1).sum(axis=0) +
                      np.linalg.norm(forces_np[..., :3], axis=-1).std(axis=0))
        path_lengths = np.sum(np.linalg.norm(np.diff(xyz_q_np[:, :, :3], axis=0), axis=2), axis=0)
        assert path_costs.shape == (self.n_sim_trajs,)
        assert path_lengths.shape == (self.n_sim_trajs,)
        unfeasible_path_ids = np.where(path_lengths > unfeasible_path_length)[0]
        rospy.logdebug('unfeasible path ids: %s' % str(unfeasible_path_ids))

        # remove unfeasible paths
        path_costs = np.delete(path_costs, unfeasible_path_ids)
        if len(path_costs) == 0:
            rospy.logwarn('All simulated paths are unfeasible')
            return None, None

        xyz_q_np = np.delete(xyz_q_np, unfeasible_path_ids, axis=1)
        num_trajs = xyz_q_np.shape[1]
        assert xyz_q_np.shape == (self.n_sim_steps + 1, num_trajs, 7)
        assert path_costs.shape == (num_trajs,)

        rospy.logdebug('Paths post-processing took %.3f [sec]' % (time() - t_start))
        return xyz_q_np, path_costs

    def publish_paths(self, xyz_q_np, path_costs, stamp=None, pose_step=500):
        if stamp is None:
            stamp = rospy.Time.now()

        num_trajs = xyz_q_np.shape[1]
        assert path_costs.shape == (num_trajs,)

        # paths marker array
        marker_array = MarkerArray()
        red = np.array([1., 0., 0.])
        green = np.array([0., 1., 0.])
        path_costs_norm = normalize(path_costs)
        for i in range(num_trajs):
            # map path cost to color (lower cost -> greener, higher cost -> redder)
            color = green + (red - green) * path_costs_norm[i]
            marker_msg = poses_to_marker(xyz_q_np[::pose_step, i], color=color)
            marker_msg.header.frame_id = self.gridmap_frame
            marker_msg.header.stamp = stamp
            marker_msg.ns = 'paths'
            marker_msg.id = i
            marker_array.markers.append(marker_msg)

        # publish all sampled paths
        self.sampled_paths_pub.publish(marker_array)

        # publish lower cost path
        best_traj_i = np.argmin(path_costs)
        best_xyz_q = xyz_q_np[:, best_traj_i]
        rospy.logdebug('Min path cost: %.3f' % path_costs[best_traj_i])
        rospy.logdebug('Max path cost: %.3f' % path_costs.max())
        rospy.loginfo('Publishing lower cost path of length: %d' % len(best_xyz_q[::pose_step]))
        path_msg = poses_to_path(best_xyz_q[::pose_step], stamp=stamp, frame_id=self.gridmap_frame)
        self.lc_path_pub.publish(path_msg)

        # publish path costs
        path_costs_msg = Float32MultiArray()
        path_costs_msg.data = path_costs
        self.path_costs_pub.publish(path_costs_msg)

    @staticmethod
    def spin():
        try:
            rospy.spin()
        except rospy.ROSInterruptException:
            pass


def main():
    rospy.init_node('diff_physics', anonymous=True, log_level=rospy.DEBUG)

    robot = rospy.get_param('~robot', 'tradr')
    gridmap_topic = rospy.get_param('~gridmap_topic')
    max_age = rospy.get_param('~max_age', 0.5)
    traj_sim_time = rospy.get_param('~traj_sim_time', 10.0)
    n_sim_trajs = rospy.get_param('~n_sim_trajs', 40)
    allow_backward = rospy.get_param('~allow_backward', True)
    linear_vel = rospy.get_param('~linear_vel', 0.5)
    angular_vel_max = rospy.get_param('~angular_vel_max', 0.5)
    device = rospy.get_param('~device', 'cuda' if torch.cuda.is_available() else 'cpu')

    node = DiffPhysicsWarp(robot=robot,
                           gridmap_topic=gridmap_topic,
                           max_age=max_age,
                           traj_sim_time=traj_sim_time,
                           n_sim_trajs=n_sim_trajs,
                           allow_backward=allow_backward,
                           linear_vel=linear_vel,
                           angular_vel_max=angular_vel_max,
                           device=device)
    node.spin()


if __name__ == '__main__':
    main()
