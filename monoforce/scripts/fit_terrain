import numpy as np
import torch
from monoforce.models.dphysics import DPhysics
from monoforce.config import DPhysConfig
from monoforce.vis import setup_visualization, animate_trajectory


def visualize(states, forces, x_grid, y_grid, z_grid, mask_left, mask_right):
    with torch.no_grad():
        # visualize using mayavi
        for b in range(len(states[0])):
            # get the states and forces for the b-th rigid body and move them to the cpu
            xs, R, xds, omegas, x_points = [s[b].cpu().numpy() for s in states]
            F_spring, F_friction, F_thrust_left, F_thrust_right = [f[b].cpu().numpy() for f in forces]
            x_grid_np, y_grid_np, z_grid_np = [g[b].cpu().numpy() for g in [x_grid, y_grid, z_grid]]
            mask_left_np, mask_right_np = mask_left[b].cpu().numpy(), mask_right[b].cpu().numpy()

            # set up the visualization
            vis_cfg = setup_visualization(states=(xs, R, xds, omegas, x_points),
                                          forces=(F_spring, F_friction, F_thrust_left, F_thrust_right),
                                          x_grid=x_grid_np, y_grid=y_grid_np, z_grid=z_grid_np,
                                          mask_left=mask_left_np, mask_right=mask_right_np)

            # visualize animated trajectory
            animate_trajectory(states=(xs, R, xds, omegas, x_points),
                               forces=(F_spring, F_friction, F_thrust_left, F_thrust_right),
                               z_grid=z_grid_np,
                               mask_left=mask_left_np, mask_right=mask_right_np,
                               vis_cfg=vis_cfg, step=10)


def optimize_terrain_properties():
    dphys_cfg = DPhysConfig()

    # simulation parameters
    T, dt = 3.0, 0.01
    dT = 0.2  # time period to cut the trajectory into samples
    dphys_cfg.dt = dt
    dphys_cfg.traj_sim_time = T
    n_iters = 100
    lr = 0.01
    vis = False

    # rigid body parameters
    x_points = torch.as_tensor(dphys_cfg.robot_points)
    mask_left = torch.as_tensor(dphys_cfg.robot_mask_left)
    mask_right = torch.as_tensor(dphys_cfg.robot_mask_right)

    # initial state
    x = torch.tensor([[-1.0, 0.0, 0.1]])
    xd = torch.tensor([[0.0, 0.0, 0.0]])
    R = torch.eye(3).repeat(x.shape[0], 1, 1)
    omega = torch.tensor([[0.0, 0.0, 0.0]])
    x_points = x_points @ R.transpose(1, 2) + x.unsqueeze(1)
    mask_left = mask_left.repeat(x.shape[0], 1)
    mask_right = mask_right.repeat(x.shape[0], 1)

    # heightmap defining the terrain
    x_grid = torch.arange(-dphys_cfg.d_max, dphys_cfg.d_max, dphys_cfg.grid_res)
    y_grid = torch.arange(-dphys_cfg.d_max, dphys_cfg.d_max, dphys_cfg.grid_res)
    x_grid, y_grid = torch.meshgrid(x_grid, y_grid)
    z_grid_gt = torch.exp(-(x_grid - 2) ** 2 / 4) * torch.exp(-(y_grid - 0) ** 2 / 2)
    # repeat the heightmap for each rigid body
    x_grid = x_grid.repeat(x.shape[0], 1, 1)
    y_grid = y_grid.repeat(x.shape[0], 1, 1)
    z_grid_gt = z_grid_gt.repeat(x.shape[0], 1, 1)

    # control inputs in Newtons
    controls = torch.tensor([[[1.0, 1.0]] * int(dphys_cfg.traj_sim_time / dphys_cfg.dt)])

    # initial state
    state0 = (x, xd, R, omega, x_points)

    # simulate the rigid body dynamics
    dphysics = DPhysics(dphys_cfg)
    states_gt, forces_gt = dphysics(z_grid=z_grid_gt, controls=controls, state=state0)
    if vis:
        visualize(states_gt, forces_gt, x_grid, y_grid, z_grid_gt, mask_left, mask_right)

    # initial guess for the heightmap
    z_grid = torch.zeros_like(z_grid_gt, requires_grad=True)

    # optimization: height and friction with different learning rates
    optimizer = torch.optim.Adam([z_grid], lr=lr)
    Xs_gt, Xds_gt, Rs_gt, Omegas_gt, X_points_gt = states_gt
    loss_min = np.Inf
    z_grid_best = z_grid.clone()
    state_dT = None
    for i in range(n_iters):
        optimizer.zero_grad()
        loss = torch.tensor(0.0)
        for t in range(0, int(T / dt), int(dT / dt)):
            # simulate the rigid body dynamics for dT time period
            dphys_cfg.traj_sim_time = dT
            # state_gt = (Xs_gt[:, t], Xds_gt[:, t], Rs_gt[:, t], Omegas_gt[:, t], X_points_gt[:, t])
            state_dT = state0 if state_dT is None else [s[:, -1] for s in states_dT]
            controls_dT = controls[:, t: t + int(dT / dt)]
            states_dT, forces_dT = dphysics(z_grid=z_grid, controls=controls_dT,
                                            # state=state0 if t == 0 else state_gt,
                                            state=state0 if t == 0 else state_dT)
            # unpack the states
            Xs, Xds, Rs, Omegas, X_points = states_dT

            # compute the loss
            loss_dT = torch.nn.functional.mse_loss(Xs, Xs_gt[:, t:t + int(dT / dt)])
            loss += loss_dT

        loss.backward()
        optimizer.step()
        print(f'Iteration {i}, Loss_x: {loss.item()}')

        if loss.item() < loss_min:
            loss_min = loss.item()
            z_grid_best = z_grid.clone()

        # heightmap difference
        with torch.no_grad():
            z_diff = torch.nn.functional.mse_loss(z_grid, z_grid_gt)
            print(f'Heightmap difference: {z_diff.item()}')

        # visualize the optimized heightmap
        if vis and i % 20 == 0:
            dphys_cfg.traj_sim_time = T
            states, forces = dphysics(z_grid=z_grid, controls=controls, state=state0)
            visualize(states, forces, x_grid, y_grid, z_grid, mask_left, mask_right)

    # visualize the best heightmap
    dphys_cfg.traj_sim_time = T
    states, forces = dphysics(z_grid=z_grid_best, controls=controls, state=state0)
    visualize(states, forces, x_grid, y_grid, z_grid_best, mask_left, mask_right)


def learn_terrain_properties():
    import matplotlib.pyplot as plt
    from monoforce.datasets import RobinGasBase, robingas_seq_paths

    np.random.seed(42)
    torch.manual_seed(42)

    dphys_cfg = DPhysConfig()
    T = dphys_cfg.traj_sim_time
    dt = dphys_cfg.dt

    path = robingas_seq_paths['tradr'][0]
    ds = RobinGasBase(path, dphys_cfg=dphys_cfg)
    i = np.random.choice(range(len(ds)))
    print('Sample:', i)
    ts, controls = ds.get_track_vels(i, T_horizon=T, dt=dt)
    print('Controls:', controls.shape)

    ts_gt, states_gt = ds.get_states_traj(i)
    states_gt = [torch.as_tensor(s)[None] for s in states_gt]  # add batch dimension
    print('GT States:')
    for s in states_gt:
        print(s.shape)

    heightmap = ds.get_heightmap(i)['z']
    print('Heightmap:', heightmap.shape)

    # find the closest timesteps in the trajectory to the ground truth timesteps
    ts_ids = np.zeros_like(ts_gt, dtype=int)
    for i, t in enumerate(ts_gt):
        ts_ids[i] = np.argmin(np.abs(ts - t))

    # add batch dimension
    controls = torch.tensor(controls, dtype=torch.float32)[None]
    z_grid = torch.tensor(heightmap, dtype=torch.float32)[None]

    dphysics = DPhysics(dphys_cfg)
    friction = torch.zeros_like(z_grid)
    friction.requires_grad = True

    optimizer = torch.optim.Adam([friction], lr=0.01)

    for i in range(100):
        optimizer.zero_grad()
        states, _ = dphysics(z_grid=z_grid, controls=controls, friction=friction)

        loss = torch.nn.functional.mse_loss(states[0][:, ts_ids], states_gt[0])
        loss.backward()
        optimizer.step()
        print(f'Iteration {i}, Loss: {loss.item()}')

        if i % 10 == 0:
            with torch.no_grad():
                batch_i = 0
                plt.figure(figsize=(20, 10))
                plt.subplot(121)
                xyz = states[0].cpu().numpy()[batch_i]
                xyz_gt = states_gt[0].cpu().numpy()[batch_i]
                plt.plot(xyz_gt[:, 0], xyz_gt[:, 1], 'kx')
                plt.plot(xyz[:, 0], xyz[:, 1], 'r.')
                plt.plot(xyz[ts_ids, 0], xyz[ts_ids, 1], 'rx')
                plt.axis('equal')
                plt.grid()

                plt.subplot(122)
                plt.imshow(friction[0].cpu().numpy())
                plt.colorbar()

                plt.show()


def main():
    # optimize_terrain_properties()
    learn_terrain_properties()


if __name__ == '__main__':
    main()
