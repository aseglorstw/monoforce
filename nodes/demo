#!/usr/bin/env python

import os
import numpy as np
import torch
import rospy
from numpy.lib.recfunctions import unstructured_to_structured
from monoforce.datasets import RobinGasVis, robingas_husky_seq_paths
from monoforce.config import DPhysConfig
from monoforce.ros import height_map_to_gridmap_msg, to_path, to_tf
from monoforce.models.lss.model import compile_model
from nav_msgs.msg import Path
from sensor_msgs.msg import PointCloud2, Image, CameraInfo
from grid_map_msgs.msg import GridMap
from ros_numpy import msgify
from monoforce.utils import read_yaml
import rospkg
import tf2_ros


class DataVis:
    def __init__(self, name='demo'):
        self.dphys_cfg = DPhysConfig()
        self.pkg_path = rospkg.RosPack().get_path('monoforce')
        self.config_path = rospy.get_param('~config_path', os.path.join(self.pkg_path, 'config/dphys_cfg.yaml'))
        assert os.path.isfile(self.config_path), 'Config file %s does not exist' % self.config_path
        self.dphys_cfg.from_yaml(self.config_path)
        self.dphys_cfg.from_rosparams(node_name=name)

        # load LSS config
        self.lss_config_path = rospy.get_param('~lss_config_path', os.path.join(self.pkg_path, 'config/lss_cfg.yaml'))
        assert os.path.isfile(self.lss_config_path), 'LSS config file %s does not exist' % self.lss_config_path
        self.lss_config = read_yaml(self.lss_config_path)
        self.grid_conf = self.lss_config['grid_conf']
        self.data_aug_conf = self.lss_config['data_aug_conf']

        self.rate = rospy.get_param('~rate', 1)
        self.map_frame = rospy.get_param('~map_frame', 'map')
        self.robot_initial_frame = rospy.get_param('~robot_initial_frame', 'base_link0')
        self.robot_frame = rospy.get_param('~robot_frame', 'base_link')
        # self.camera_frames = [cam.lower() for cam in self.data_aug_conf['cams']]
        self.camera_frames = ['camera_front', 'camera_left', 'camera_rear', 'camera_right']
        self.modelf = rospy.get_param('~lss_weights')
        self.model = self.load_model()

        # publishers
        self.gm_lidar_pub = rospy.Publisher('grid_map_lidar', GridMap, queue_size=1)
        self.gm_traj_pub = rospy.Publisher('grid_map_traj', GridMap, queue_size=1)
        self.gm_pred_pub = rospy.Publisher('grid_map_pred', GridMap, queue_size=1)
        self.cloud_pub = rospy.Publisher('cloud', PointCloud2, queue_size=1)
        self.path_pub = rospy.Publisher('path', Path, queue_size=1)
        self.img_pubs = [rospy.Publisher('%s/image' % cam, Image, queue_size=1) for cam in self.camera_frames]
        self.caminfo_pubs = [rospy.Publisher('%s/camera_info' % cam, CameraInfo, queue_size=1) for cam in self.camera_frames]
        self.tf_broadcast = tf2_ros.TransformBroadcaster()

    def load_model(self):
        model = compile_model(self.lss_config['grid_conf'], self.lss_config['data_aug_conf'], outC=1)
        rospy.loginfo('Loading model from: %s' % self.modelf)
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        model.load_state_dict(torch.load(self.modelf, map_location=device))
        model.eval()
        return model

    def publish_cloud(self, points, stamp):
        assert points.ndim == 2, 'Points must be of shape (N, 3)'
        assert points.shape[1] == 3, 'Points must be of shape (N, 3)'
        points = np.asarray(points, dtype='float32')
        cloud_struct = unstructured_to_structured(points, names=['x', 'y', 'z'])
        cloud_msg = msgify(PointCloud2, cloud_struct)
        cloud_msg.header.frame_id = self.robot_initial_frame
        cloud_msg.header.stamp = stamp
        self.cloud_pub.publish(cloud_msg)

    def publish_images(self, imgs, Ks, stamp):
        for cam, img, K, img_pub, K_pub in zip(self.camera_frames, imgs, Ks, self.img_pubs, self.caminfo_pubs):
            # images
            img = np.asarray(img, dtype='uint8')
            img_msg = msgify(Image, img, encoding='rgb8')
            img_msg.header.stamp = stamp
            img_msg.header.frame_id = cam.lower()
            img_pub.publish(img_msg)
            # cameras info
            K_msg = CameraInfo()
            P = np.zeros((3, 4))
            P[:3, :3] = K
            R = np.eye(3)
            K_msg.K = K.flatten().tolist()
            K_msg.P = P.flatten().tolist()
            K_msg.R = R.flatten().tolist()
            K_msg.header.stamp = stamp
            K_msg.header.frame_id = cam.lower()
            K_msg.height = img.shape[0]
            K_msg.width = img.shape[1]
            K_pub.publish(K_msg)

    def publish_gridmap(self, height, stamp, pub, mask=None):
        if isinstance(height, torch.Tensor):
            height = height.cpu().numpy()
        if isinstance(mask, torch.Tensor):
            mask = mask.cpu().numpy()
        grid_msg = height_map_to_gridmap_msg(height, grid_res=self.dphys_cfg.grid_res, mask=mask)
        grid_msg.info.header.frame_id = self.robot_initial_frame
        grid_msg.info.header.stamp = stamp
        pub.publish(grid_msg)

    def run(self):
        # choose data sample
        data_seq = robingas_husky_seq_paths[rospy.get_param('~seq_i', 0)]
        ds = RobinGasVis(data_seq, dphys_cfg=self.dphys_cfg, data_aug_conf=self.data_aug_conf, is_train=False)
        rospy.loginfo('Loaded dataset with %d samples from path: %s' % (len(ds), data_seq))
        sample_i = rospy.get_param('~sample_i', np.random.choice(range(len(ds))))
        rospy.loginfo('Using sample %d' % sample_i)

        imgs, rots, trans, intrins, post_rots, post_trans, hm_lidar, hm_traj, map_pose, lidar_pts = ds[sample_i]
        traj = ds.get_traj(sample_i)
        poses = traj['poses']
        points = lidar_pts.numpy().T

        imgs_raw = []
        Ks = []
        for cam in self.camera_frames:
            img_raw, K = ds.get_image(sample_i, cam, undistort=False)
            imgs_raw.append(img_raw)
            Ks.append(K)

        # get heightmap prediction
        with torch.no_grad():
            inputs = [imgs, rots, trans, intrins, post_rots, post_trans]
            inputs = [torch.as_tensor(i[None]) for i in inputs]
            height_pred = self.model(*inputs)
            height_pred = height_pred.squeeze().cpu().numpy()

        rate = rospy.Rate(self.rate)
        pose_i = 0
        while not rospy.is_shutdown():
            stamp = rospy.Time.now()

            # point cloud
            self.publish_cloud(points, stamp)
            # grid map
            self.publish_gridmap(hm_lidar[0], stamp, self.gm_lidar_pub, mask=hm_lidar[1])
            self.publish_gridmap(hm_traj[0], stamp, self.gm_traj_pub, mask=hm_traj[1])
            self.publish_gridmap(height_pred, stamp, self.gm_pred_pub)
            # path
            path_msg = to_path(poses, frame_id=self.robot_initial_frame, stamp=stamp)
            self.path_pub.publish(path_msg)
            # images
            self.publish_images(imgs_raw, Ks, stamp)
            # robot pose in map frame
            tf = to_tf(map_pose, self.map_frame, self.robot_initial_frame, stamp)
            self.tf_broadcast.sendTransform(tf)
            # camera poses
            for cam, tran, rot in zip(self.camera_frames, trans, rots):
                pose = np.eye(4)
                pose[:3, :3] = rot.numpy()
                pose[:3, 3] = tran.numpy()
                tf = to_tf(pose, self.robot_initial_frame, cam, stamp)
                self.tf_broadcast.sendTransform(tf)

            robot_traj_pose = poses[pose_i]
            pose_i = (pose_i + 1) % len(poses)
            tf = to_tf(robot_traj_pose, self.robot_initial_frame, self.robot_frame, stamp)
            self.tf_broadcast.sendTransform(tf)

            rospy.logdebug('Published data')
            rate.sleep()

def main():
    rospy.init_node('demo', anonymous=True, log_level=rospy.DEBUG)
    node = DataVis()
    node.run()


if __name__ == '__main__':
    main()
