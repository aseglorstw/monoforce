#!/usr/bin/env python

import os
import torch
import numpy as np
import cv2
import rospy
from cv_bridge import CvBridge
from grid_map_msgs.msg import GridMap
from monoforce.config import Config
from monoforce.models import RigidBodySoftTerrain, State
from monoforce.models.monolayout import load_monodem
from monoforce.ros import height_map_to_point_cloud_msg, height_map_to_gridmap_msg, to_marker, to_path
from monoforce.utils import normalize
from nav_msgs.msg import Path
from sensor_msgs.msg import Image, CompressedImage, PointCloud2
import rospkg
from time import time
from scipy.ndimage import rotate

from visualization_msgs.msg import MarkerArray

pkg_path = rospkg.RosPack().get_path('monoforce')

class MonoForce:
    def __init__(self, cfg: Config,
                 model_name=None,
                 robot_frame='base_link',
                 img_topic='/camera/image_raw/compressed',
                 linear_vels=[1.],
                 angular_vels=[0.]):
        self.cfg = cfg
        self.model_name = model_name
        rospy.loginfo('Loading model %s' % self.model_name)
        self.load_model()
        self.robot_frame = robot_frame
        self.linear_vels = linear_vels
        self.angular_vels = angular_vels

        # cv bridge
        self.cv_bridge = CvBridge()
        # height map publisher
        self.hm_img_pub = rospy.Publisher('~height_map/image', Image, queue_size=1)
        # point cloud publisher
        self.hm_cloud_pub = rospy.Publisher('~height_map/points', PointCloud2, queue_size=1)
        # grid map publisher
        self.hm_grid_pub = rospy.Publisher('~grid_map', GridMap, queue_size=1)
        # paths publisher
        self.paths_pub = rospy.Publisher('~sampled_paths', MarkerArray, queue_size=1)
        # lower cost path publisher
        self.lc_path_pub = rospy.Publisher('~lower_cost_path', Path, queue_size=1)

        # image subscriber
        self.img_sub = rospy.Subscriber(img_topic, CompressedImage, self.img_callback)

    def load_model(self):
        if self.model_name == 'monolayout':
            self.models = load_monodem(encoder_path=os.path.join(pkg_path, 'config/weights/monolayout/encoder.pth'),
                                       decoder_path=os.path.join(pkg_path, 'config/weights/monolayout/decoder.pth'),
                                       cfg=self.cfg)
        else:
            pass

    def preprocess_img(self, img_raw):
        # resize image
        H_raw, W_raw = img_raw.shape[:2]
        h, w = self.cfg.img_size
        img = cv2.resize(img_raw, (int(h / H_raw * W_raw), h))
        # crop image
        H, W = img.shape[:2]
        img = img[H - h:H, W // 2 - w // 2: W // 2 + w // 2]
        # transpose image
        img = img.transpose((2, 0, 1))  # (H, W, C) -> (C, H, W)
        return img

    def monolayout_inference(self, img):
        with torch.no_grad():
            img_tensor = torch.from_numpy(img).unsqueeze(0)
            features = self.models['encoder'](img_tensor)
            height_pred = self.models['decoder'](features, is_training=True)
        height_pred = height_pred.squeeze().cpu().numpy()

        return height_pred

    def img_callback(self, msg):
        # if message is old do not process it
        if msg.header.stamp < rospy.Time.now() - rospy.Duration(1.):
            rospy.logwarn('Old image message received, skipping')
            return

        t0 = time()
        img = self.cv_bridge.compressed_imgmsg_to_cv2(msg)
        img = self.preprocess_img(img)
        height = self.monolayout_inference(img)
        rospy.logdebug('Predicted height map shape: %s' % str(height.shape))
        rospy.logdebug('MonoDem inference time: %.3f' % (time() - t0))

        # publish image
        height_uint8 = np.asarray(255 * normalize(height), dtype='uint8')
        img_msg = self.cv_bridge.cv2_to_imgmsg(height_uint8, encoding='mono8')
        img_msg.header.stamp = msg.header.stamp
        img_msg.header.frame_id = self.robot_frame
        self.hm_img_pub.publish(img_msg)

        height = height.T
        height = rotate(height, 180)

        # predict path
        with torch.no_grad():
            self.predict_paths(height, linear_vels=self.linear_vels, angular_vels=self.angular_vels)

        # publish point cloud
        t1 = time()
        h, w = np.asarray(height.shape) * self.cfg.grid_res
        cloud_msg = height_map_to_point_cloud_msg(height, self.cfg.grid_res,
                                                  xyz=np.array([h / 2., 0., 0.]), q=np.array([0., 0., 0., 1.]))
        cloud_msg.header.stamp = msg.header.stamp
        cloud_msg.header.frame_id = self.robot_frame
        self.hm_cloud_pub.publish(cloud_msg)

        # publish grid map
        grid_msg = height_map_to_gridmap_msg(height, self.cfg.grid_res,
                                             xyz=np.array([h / 2., 0., 0.]), q=np.array([0., 0., 0., 1.]))
        grid_msg.info.header.stamp = msg.header.stamp
        grid_msg.info.header.frame_id = self.robot_frame
        self.hm_grid_pub.publish(grid_msg)
        rospy.logdebug('Height map publishing took %.3f' % (time() - t1))

    def sim(self, height, controls):
        assert isinstance(height, np.ndarray)
        assert height.shape[0] == height.shape[1]
        assert isinstance(controls, dict)
        assert 'stamps' in controls.keys()
        assert 'linear_v' in controls.keys()
        assert 'angular_w' in controls.keys()

        h, w = np.asarray(height.shape) * self.cfg.grid_res
        state = State(xyz=torch.tensor([0, 0., 0.], device=self.cfg.device).view(3, 1),
                   rot=torch.eye(3, device=self.cfg.device),
                   vel=torch.tensor([0., 0., 0.], device=self.cfg.device).view(3, 1),
                   omega=torch.tensor([0., 0., 0.], device=self.cfg.device).view(3, 1),
                   device=self.cfg.device)
        state[0][0] = -h / 2.  # move robot to the edge of the height map

        """ Create robot-terrain interaction models """
        system = RigidBodySoftTerrain(height=height,
                                      grid_res=self.cfg.grid_res,
                                      friction=self.cfg.friction,
                                      mass=self.cfg.robot_mass,
                                      state=state,
                                      device=self.cfg.device, use_ode=False,
                                      interaction_model='diffdrive')

        # put models with their params to self.cfg.device
        system = system.to(self.cfg.device)
        tt = controls['stamps'].to(self.cfg.device)

        """ Navigation loop """
        dt = (tt[1:] - tt[:-1]).mean()

        xyz, Rs, linear_v, angular_w, forces = state
        xyz, Rs, linear_v, angular_w, forces = [xyz], [Rs], [linear_v], [angular_w], [forces]

        for t in range(len(tt[1:])):
            v, w = controls['linear_v'][t], controls['angular_w'][t]

            state[2][0] = v
            state[3][2] = w

            dstate = system.forward(t, state)
            state = state.update(dstate, dt)

            xyz.append(state[0])
            Rs.append(state[1])
            linear_v.append(state[2])
            angular_w.append(state[3])
            forces.append(state[4])

        # height map origin is at the edge of the map
        xyz = torch.stack(xyz) + torch.tensor([h / 2., 0., 0.], device=self.cfg.device).view(3, 1)
        Rs = torch.stack(Rs)
        linear_v = torch.stack(linear_v)
        angular_w = torch.stack(angular_w)
        forces = torch.stack(forces)

        states = [xyz, Rs, linear_v, angular_w, forces]

        return states

    def path_cost(self, states):
        assert isinstance(states, list)
        assert len(states) == 5
        xyz, Rs, linear_v, angular_w, forces = states
        # path cost as a sum of force magnitudes
        assert forces.ndim == 3  # (n_samples, 3, n_points)
        # reduce forces acting on all robot points
        forces = forces.sum(dim=2)
        assert forces.shape[1] == 3
        cost = forces.norm(dim=1).mean()
        return cost

    def predict_paths(self, height, linear_vels=None, angular_vels=None):
        if angular_vels is None:
            angular_vels = [0.]
        if linear_vels is None:
            linear_vels = [1.]
        assert isinstance(height, np.ndarray)

        tt = torch.linspace(0., self.cfg.total_sim_time, self.cfg.n_samples)
        # paths marker array
        marker_array = MarkerArray()
        path_id = 0
        lower_cost_poses = None
        max_path_cost = torch.tensor(-np.inf, device=self.cfg.device)
        min_path_cost = torch.tensor(np.inf, device=self.cfg.device)
        for v in linear_vels:
            for w in angular_vels:
                # controls
                controls = {
                    'stamps': tt,
                    'linear_v': v * torch.ones(self.cfg.n_samples),
                    'angular_w': w * torch.ones(self.cfg.n_samples)
                }

                # predict states
                t0 = time()
                states = self.sim(height, controls)
                t1 = time()
                rospy.logdebug('Path of %d samples simulation took %.3f' % (self.cfg.n_samples, t1 - t0))

                # create path message (Marker)
                xyz = states[0].cpu().numpy()[::100]
                Rs = states[1].cpu().numpy()[::100]
                Ts = np.zeros((len(xyz), 4, 4))
                Ts[:, :3, :3] = Rs
                Ts[:, :3, 3:4] = xyz
                Ts[:, 3, 3] = 1.

                # compute path cost
                path_cost = self.path_cost(states)
                # rospy.logdebug('Path cost: %.3f' % path_cost.item())
                if path_cost > max_path_cost:
                    max_path_cost = path_cost.clone()
                if path_cost < min_path_cost:
                    min_path_cost = path_cost.clone()
                    lower_cost_poses = Ts
                # normalize path cost
                path_cost = (path_cost - min_path_cost) / (max_path_cost - min_path_cost) if max_path_cost > min_path_cost else path_cost
                # rospy.logdebug('Path cost normalized: %.3f' % path_cost.item())

                # map path cost to color (lower cost -> greener, higher cost -> redder)
                color = np.array([0., 1., 0.]) + (np.array([1., 0., 0.]) - np.array([0., 1., 0.])) * path_cost.item()
                marker_msg = to_marker(Ts, color=color)
                marker_msg.header.stamp = rospy.Time.now()
                marker_msg.header.frame_id = self.robot_frame
                marker_msg.ns = 'paths'
                marker_msg.id = path_id
                path_id += 1
                marker_array.markers.append(marker_msg)
                rospy.logdebug('Path to marker array conversion took %.3f' % (time() - t1))

        # publish all sampled paths
        self.paths_pub.publish(marker_array)
        # publish lower cost path
        if lower_cost_poses is not None:
            path_msg = to_path(lower_cost_poses, stamp=rospy.Time.now(), frame_id=self.robot_frame)
            path_msg.header.stamp = rospy.Time.now()
            path_msg.header.frame_id = self.robot_frame
            self.lc_path_pub.publish(path_msg)


def main():
    rospy.init_node('monoforce', anonymous=True, log_level=rospy.DEBUG)

    cfg = Config()
    cfg.grid_res = 0.1
    cfg.device = 'cuda'
    cfg.d_max = 12.8
    cfg.d_min = 1.
    cfg.img_size = (512, 512)
    cfg.total_sim_time = rospy.get_param('~total_sim_time')
    cfg.n_samples = 100 * int(cfg.total_sim_time)

    img_topic = rospy.get_param('~img_topic')
    robot_frame = rospy.get_param('~robot_frame')
    # control parameters
    linear_vels = rospy.get_param('~linear_vels')
    angular_vels = rospy.get_param('~angular_vels')
    node = MonoForce(cfg=cfg, model_name='monolayout', img_topic=img_topic, robot_frame=robot_frame,
                     linear_vels=linear_vels, angular_vels=angular_vels)
    rospy.spin()


if __name__ == '__main__':
    main()
