#!/usr/bin/env python

import os
import torch
import numpy as np
from torch.utils.data import ConcatDataset
from monoforce.models.lss.model import compile_model
from monoforce.datasets.data import OmniDemData
from monoforce.config import Config
from monoforce.datasets import seq_paths
from monoforce.models.lss.tools import MSELoss
from monoforce.utils import normalize
import matplotlib.pyplot as plt
# projection 3d import
from mpl_toolkits.mplot3d import Axes3D
from tqdm import tqdm


def explore_data(ds, model=None, samples=1):
    plt.switch_backend('Qt5Agg')

    print('Cameras: ', ds.cameras)
    for counter in np.random.choice(range(len(ds)), samples):
        sample = ds[counter]
        imgs = sample[0].permute(0, 2, 3, 1)
        imgs = [ds.destandardize_img(img) for img in imgs]
        imgs = [normalize(img) for img in imgs]

        if model is None:
            local_map = sample[6][0]
        else:
            # predict heightmap
            preds = model(sample[0].unsqueeze(0).to(ds.cfg.device),
                          sample[1].unsqueeze(0).to(ds.cfg.device),
                          sample[2].unsqueeze(0).to(ds.cfg.device),
                          sample[3].unsqueeze(0).to(ds.cfg.device),
                          sample[4].unsqueeze(0).to(ds.cfg.device),
                          sample[5].unsqueeze(0).to(ds.cfg.device),
                          )
            local_map = preds.squeeze().cpu().numpy()

        fig, ax = plt.subplots(3, 3)
        # figsize
        fig.set_size_inches(18.5, 10.5)
        # switch off axis and grid
        for i in range(3):
            for j in range(3):
                if i == 1 and j == 1:
                    continue
                ax[i, j].axis('off')
                ax[i, j].grid(False)

        ax[0, 1].title.set_text('CAM_FRONT')
        ax[0, 1].imshow(imgs[0])
        ax[1, 0].title.set_text('CAM_LEFT')
        ax[1, 0].imshow(imgs[3])

        ax[1, 1].title.set_text('LOCAL_MAP')
        fig.colorbar(ax[1, 1].imshow(local_map, cmap='jet'), ax=ax[1, 1])
        ax[1, 1].plot(local_map.shape[0]//2, local_map.shape[1]//2, 'k+')
        # set x ticks from -d_max to d_max
        ax[1, 1].set_xticks(np.linspace(0, local_map.shape[0], 5))
        ax[1, 1].set_yticks(np.linspace(0, local_map.shape[1], 5))
        ax[1, 1].set_xticklabels(np.linspace(-ds.cfg.d_max, ds.cfg.d_max, 5))
        ax[1, 1].set_yticklabels(np.linspace(-ds.cfg.d_max, ds.cfg.d_max, 5))
        ax[1, 1].set_xlabel('x (m)')
        ax[1, 1].set_ylabel('y (m)')

        ax[1, 2].title.set_text('CAM_RIGHT')
        ax[1, 2].imshow(imgs[2])
        ax[2, 1].title.set_text('CAM_REAR')
        ax[2, 1].imshow(imgs[1])

        # plot height map as a surface at a new figure
        fig = plt.figure()
        ax = fig.add_subplot(111, projection='3d')
        X = np.arange(-ds.cfg.d_max, ds.cfg.d_max, ds.cfg.grid_res)
        Y = np.arange(-ds.cfg.d_max, ds.cfg.d_max, ds.cfg.grid_res)
        X, Y = np.meshgrid(X, Y)
        surf = ax.plot_surface(X, Y, local_map, cmap='jet', linewidth=0, antialiased=False)
        ax.set_xlabel('x (m)')
        ax.set_ylabel('y (m)')
        ax.set_zlabel('z (m)')
        fig.colorbar(surf, shrink=0.5, aspect=5)
        ax.set_xlim(-ds.cfg.d_max, ds.cfg.d_max)
        ax.set_ylim(-ds.cfg.d_max, ds.cfg.d_max)
        ax.set_zlim(-1., 1.)

        plt.show()


def create_datasets(train_paths, val_path, data_aug_conf, cfg, debug=False, vis=False):
    # create dataset for LSS model training
    datasets = []
    print('Train paths:', train_paths)
    print('Val path:', val_path)
    for path in train_paths:
        assert os.path.exists(path)
        train_ds = OmniDemData(path, is_train=True, data_aug_conf=data_aug_conf, cfg=cfg)
        if vis:
            explore_data(train_ds)
        datasets.append(train_ds)
    train_ds = ConcatDataset(datasets)

    # create validation dataset
    val_ds = OmniDemData(val_path, is_train=False, data_aug_conf=data_aug_conf, cfg=cfg)
    if vis:
        explore_data(val_ds)

    if debug:
        print('Debug mode: using small datasets')
        train_ds = torch.utils.data.Subset(train_ds, np.random.choice(len(train_ds), 32, replace=False))
        val_ds = torch.utils.data.Subset(val_ds, np.random.choice(len(val_ds), 16, replace=False))
    print('Training dataset size:', len(train_ds))
    print('Validation dataset size:', len(val_ds))

    return train_ds, val_ds


def main():
    cfg = Config()
    cfg.d_min = 0.6
    cfg.d_max = 6.4
    cfg.grid_res = 0.1
    cfg.h_above_lidar = 0.3
    cfg.device = torch.device('cuda:0')

    bsz = 2
    nworkers = 10

    modelf = '../config/weights/lss/lss11.pt'

    grid_conf = {
        'xbound': [-cfg.d_max, cfg.d_max, cfg.grid_res],
        'ybound': [-cfg.d_max, cfg.d_max, cfg.grid_res],
        'zbound': [-2.0, 2.0, 4.0],
        'dbound': [cfg.d_min, cfg.d_max, cfg.grid_res],
    }

    data_aug_conf = {
                    'resize_lim': (0.193, 0.225),
                    'final_dim': (128, 352),
                    'rot_lim': (-5.4, 5.4),
                    'H': 1200, 'W': 1920,
                    'rand_flip': False,
                    'bot_pct_lim': (0.0, 0.22),
                    'cams': ['CAM_FRONT', 'CAM_LEFT', 'CAM_REAR', 'CAM_RIGHT'],
                    'Ncams': 4,
                }

    train_ds_paths = seq_paths[:-1]
    val_ds_path = seq_paths[-1]
    _, val_ds = create_datasets(train_ds_paths, val_ds_path,
                                data_aug_conf=data_aug_conf, cfg=cfg, vis=False, debug=False)
    valloader = torch.utils.data.DataLoader(val_ds, batch_size=bsz, shuffle=False, num_workers=nworkers)

    model = compile_model(grid_conf, data_aug_conf, outC=1)
    print('loading', modelf)
    model.load_state_dict(torch.load(modelf))
    model.to(cfg.device)
    model.eval()

    loss_fn = MSELoss()

    # validation epoch
    with torch.no_grad():
        # explore_data(val_ds, model=model, samples=3)
        val_loss = 0.0
        for batchi, (imgs, rots, trans, intrins, post_rots, post_trans, heightmap)\
                in tqdm(enumerate(valloader), total=len(valloader)):
            preds = model(imgs.to(cfg.device),
                          rots.to(cfg.device),
                          trans.to(cfg.device),
                          intrins.to(cfg.device),
                          post_rots.to(cfg.device),
                          post_trans.to(cfg.device),
                          )
            heightmap = heightmap.to(cfg.device)
            loss = loss_fn(preds, heightmap)
            val_loss += loss.item()
        val_loss /= len(valloader)
        print('Validation loss:', val_loss)
        explore_data(val_ds, model=model, samples=1)


if __name__ == '__main__':
    main()
