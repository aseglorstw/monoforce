#!/usr/bin/env python

import os
import numpy as np
import rospy
from cv_bridge import CvBridge
from grid_map_msgs.msg import GridMap
from monoforce.config import Config
from monoforce.ros import height_map_to_point_cloud_msg, height_map_to_gridmap_msg
from monoforce.utils import normalize, read_yaml
from monoforce.cloudproc import estimate_heightmap, position, filter_grid, filter_range
from ros_numpy import numpify, msgify
from sensor_msgs.msg import Image, CompressedImage, PointCloud2
import rospkg
import tf2_ros
from time import time
from message_filters import ApproximateTimeSynchronizer, Subscriber

pkg_path = rospkg.RosPack().get_path('monoforce')


class HeightMapEstimator:
    def __init__(self, cfg: Config,
                 pts_topics=['points'],
                 robot_frame='base_link'):
        self.cfg = cfg
        self.robot_frame = robot_frame

        # cv bridge
        self.cv_bridge = CvBridge()
        # tf buffer
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer)

        # height map publisher
        self.hm_img_pub = rospy.Publisher('/height_map/image', Image, queue_size=1)
        # point cloud publisher
        self.hm_cloud_pub = rospy.Publisher('/height_map/points', PointCloud2, queue_size=1)
        # grid map publisher
        self.hm_grid_pub = rospy.Publisher('/grid_map', GridMap, queue_size=1)

        # max message delay
        self.max_stale_msg_delay = 0.5

        # point cloud subscribers
        self.pts_subs = []
        for topic in pts_topics:
            self.pts_subs.append(Subscriber(topic, PointCloud2))
        self.pts_sync = ApproximateTimeSynchronizer(self.pts_subs, queue_size=1, slop=0.2)
        self.pts_sync.registerCallback(self.pts_callback)

    def pts_callback(self, *msgs):
        msg = msgs[0]
        # if message is stale do not process it
        dt = rospy.Time.now() - msg.header.stamp
        if dt.to_sec() > self.max_stale_msg_delay:
            rospy.logdebug(
                f'Stale image messages received ({dt.to_sec():.3f} > {self.max_stale_msg_delay} [sec]), skipping')
            return

        t0 = time()
        # convert messages to points
        points = self.msgs_to_points(msgs)

        # estimate height map
        hm = estimate_heightmap(points, d_min=self.cfg.d_min, d_max=self.cfg.d_max,
                                grid_res=self.cfg.grid_res, h_max=self.cfg.h_max,
                                hm_interp_method=self.cfg.hm_interp_method)
        if hm is None:
            rospy.logwarn('Could not estimate height map')
            return
        height = hm['z']
        rospy.logdebug('Estimated height map shape: %s' % str(height.shape))
        rospy.logdebug('HM estimation time: %.3f' % (time() - t0))

        # publish image
        height_uint8 = np.asarray(255 * normalize(height), dtype='uint8')
        img_msg = self.cv_bridge.cv2_to_imgmsg(height_uint8, encoding='mono8')
        img_msg.header.stamp = msg.header.stamp
        img_msg.header.frame_id = msg.header.frame_id
        self.hm_img_pub.publish(img_msg)

        # publish point cloud
        t1 = time()
        cloud_msg = height_map_to_point_cloud_msg(height, self.cfg.grid_res,
                                                  xyz=np.array([0., 0., 0.]), q=np.array([0., 0., 0., 1.]))
        cloud_msg.header.stamp = msg.header.stamp
        cloud_msg.header.frame_id = self.robot_frame
        self.hm_cloud_pub.publish(cloud_msg)

        # publish grid map
        grid_msg = height_map_to_gridmap_msg(height, self.cfg.grid_res,
                                             xyz=np.array([0., 0., 0.]), q=np.array([0., 0., 0., 1.]))
        grid_msg.info.header.stamp = msg.header.stamp
        grid_msg.info.header.frame_id = self.robot_frame
        self.hm_grid_pub.publish(grid_msg)
        rospy.logdebug('Height map publishing took %.3f' % (time() - t1))

    def msgs_to_points(self, msgs):
        all_points = []
        for msg in msgs:
            cloud = numpify(msg)
            if cloud.ndim > 1:
                cloud = cloud.reshape(-1)
            points = position(cloud)

            # apply range filter
            points = filter_range(points, min=self.cfg.d_min, max=np.sqrt(2) * self.cfg.d_max)

            # apply grid filter
            points = filter_grid(points, self.cfg.grid_res)

            # transform points to robot frame
            try:
                tf = self.tf_buffer.lookup_transform(target_frame=self.robot_frame,
                                                     source_frame=msg.header.frame_id,
                                                     time=msg.header.stamp,
                                                     timeout=rospy.Duration(0.5))
            except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
                rospy.logwarn('Could not get transform from %s to %s' % (msg.header.frame_id, self.cfg.robot_frame))
                return
            Tr = numpify(tf.transform).reshape((4, 4))
            points = np.matmul(Tr[:3, :3], points.T).T + Tr[:3, 3]

            all_points.append(points)

        all_points = np.concatenate(all_points, axis=0)
        rospy.logdebug('Points shape: %s' % str(all_points.shape))
        return all_points


def main():
    rospy.init_node('hm_estimator', anonymous=True, log_level=rospy.DEBUG)

    cfg = Config()
    config_path = rospy.get_param('~config_path', os.path.join(pkg_path, 'config/cfg.yaml'))
    assert os.path.isfile(config_path), 'Config file %s does not exist' % config_path
    cfg.from_yaml(config_path)
    # cfg.to_rosparam()

    pts_topics = rospy.get_param('~pts_topics')
    robot_frame = rospy.get_param('~robot_frame', 'base_link')
    node = HeightMapEstimator(cfg=cfg, pts_topics=pts_topics, robot_frame=robot_frame)
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print('Shutting down')


if __name__ == '__main__':
    main()
