#!/usr/bin/env python
"""
"""
from __future__ import absolute_import, division, print_function
import numpy as np
import os
import cv2
from monoforce.datasets.utils import load_cam_calib
from monoforce.utils import slots
from ros_numpy import msgify, numpify
from rosbag import Bag, Compression
from sensor_msgs.msg import PointCloud2
from cv_bridge import CvBridge
from monoforce.ros import load_tf_buffer, img_msg_to_cv2, get_closest_msg, get_cams_lidar_transformations, \
    get_camera_infos, append_transformation
from tqdm import tqdm
from argparse import ArgumentParser


def arg_parser():
    parser = ArgumentParser(epilog="""Path format uses following placeholders:
    {dir} - parent directory of the first bag file,
    {name} - name without extension of the first bag file,
    {topic} - name of the topic as read from bag file,
    {secs}, {nsecs} - timestamp from the header (if available).
    """)
    parser.add_argument('--lidar-topic', type=str, default='/points')
    parser.add_argument('--camera-topics', type=str, nargs='+')
    parser.add_argument('--camera-info-topics', type=str, nargs='+')
    parser.add_argument('--depth-topics', type=str, nargs='+')
    parser.add_argument('--save-data', type=str2bool, default=True)
    parser.add_argument('--bag-path', type=str)
    return parser


def str2bool(v):
    return v.lower() in ('1', 'yes', 'true', 't', 'y')

def save_clouds_and_images(bag_path, rgb_topics, lidar_topic, depth_topics, time_prediod=5.0, lidar='os_sensor', save=True):
    data_path = bag_path.replace('.bag', '_trav')
    clouds_path = os.path.join(data_path, 'clouds')
    os.makedirs(clouds_path, exist_ok=True)
    last_time = None
    cv_bridge = CvBridge()
    # calib = load_cam_calib(os.path.join(data_path, 'calibration'))

    with Bag(bag_path, 'r') as bag:
        # save clouds and get timestamps
        timestamps = []
        ids = []
        for topic, msg, t in tqdm(bag.read_messages(topics=[lidar_topic]),
                                  total=bag.get_message_count(topic_filters=[lidar_topic])):
            # skip messages which are too close to each other (time difference < 5 s)
            if last_time is not None and (t.to_sec() - last_time) < time_prediod:
                continue
            last_time = t.to_sec()
            print('Got lidar msg from topic "%s" at %.3f s' % (topic, t.to_sec()))

            msg = PointCloud2(*slots(msg))
            cloud_struct = numpify(msg)
            # print('Cloud struct:', cloud_struct.shape)
            if cloud_struct.ndim == 2:
                cloud_struct = cloud_struct.reshape((-1,))

            if lidar is None:
                lidar = msg.header.frame_id
            timestamps.append(t.to_sec())
            id = '{secs}_{nsecs:09d}'.format(secs=msg.header.stamp.secs, nsecs=msg.header.stamp.nsecs)
            ids.append(id)

            if save:
                # save cloud
                p = os.path.join(clouds_path, f'{id}.npz')
                np.savez_compressed(p, cloud=cloud_struct)

        # save images at cloud timestamps
        for rgb_topic in rgb_topics:
            print('Saving images from topic "%s"' % rgb_topic)
            for i in tqdm(range(len(timestamps))):
                # get the closest image at points time
                msg = get_closest_msg(bag=bag, topic=rgb_topic, time=timestamps[i])
                if msg is None:
                    print('No image found for cloud at %.3f s' % timestamps[i])
                    continue
                img_raw = img_msg_to_cv2(msg, cv_bridge)
                camera = rgb_topic.split('/')[1]
                if save:
                    # save images
                    os.makedirs(os.path.join(data_path, 'images'), exist_ok=True)
                    cv2.imwrite(os.path.join(data_path, 'images', '%s_%s.png' % (ids[i], camera)), img_raw)

        # save depth images at cloud timestamps
        for depth_topic in depth_topics:
            print('Saving depth images from topic "%s"' % depth_topic)
            for i in tqdm(range(len(timestamps))):
                # get the closest image at points time
                msg = get_closest_msg(bag=bag, topic=depth_topic, time=timestamps[i])
                if msg is None:
                    print('No depth image found for cloud at %.3f s' % timestamps[i])
                    continue
                img_raw = img_msg_to_cv2(msg, cv_bridge)
                camera = depth_topic.split('/')[1]
                if save:
                    # save images
                    os.makedirs(os.path.join(data_path, 'depth_images'), exist_ok=True)
                    cv2.imwrite(os.path.join(data_path, 'depth_images', '%s_%s.png' % (ids[i], camera)), img_raw)

def process(bag_path, lidar_topic, camera_topics, camera_info_topics, depth_topics, save_data,
            robot_frame='base_link', lidar_frame='ouster_link'):
    assert os.path.exists(bag_path), 'Bag file does not exist: %s' % bag_path

    tf_buffer = load_tf_buffer([bag_path])
    print('Obtaining camera infos from bag file...')
    get_camera_infos(bag_path, camera_info_topics, save=save_data)
    print('Obtaining lidar to camera transformations from bag file...')
    get_cams_lidar_transformations(bag_path, camera_topics, lidar_topic, tf_buffer, save=save_data)
    print(f'Obtaining {robot_frame} to base_footprint transformations from bag file...')
    append_transformation(bag_path, source_frame=robot_frame, target_frame='base_footprint', save=save_data, tf_buffer=tf_buffer)
    print(f'Obtaining {robot_frame} to {lidar_frame} transformations from bag file...')
    append_transformation(bag_path, source_frame=robot_frame, target_frame=lidar_frame, save=save_data, tf_buffer=tf_buffer,
                          matrix_name=f'T_{robot_frame}__os_sensor')
    print('Saving clouds and images...')
    save_clouds_and_images(bag_path, camera_topics, lidar_topic, depth_topics, save=save_data)


def main():
    args = arg_parser().parse_args()
    print(args)
    process(**vars(args))


if __name__ == '__main__':
    main()
