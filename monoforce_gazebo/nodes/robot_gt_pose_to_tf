#!/usr/bin/env python

import numpy as np
import rospy
import tf2_ros
from gazebo_msgs.msg import ModelStates
from geometry_msgs.msg import TransformStamped
from ros_numpy import numpify
from tf.transformations import quaternion_from_matrix


class GroundTruthPublisher:
    def __init__(self):
        # Initialize the node
        rospy.init_node('ground_truth_tf_publisher')

        # Parameters
        self.robot_name = rospy.get_param('~robot_name', 'husky')  # Robot model name in Gazebo
        self.robot_frame = rospy.get_param('~robot_frame', 'husky/base_link')  # Robot frame name
        self.static_frame = rospy.get_param('~static_frame', 'world')  # Static frame name

        # tf broadcaster
        self.tf_br = tf2_ros.TransformBroadcaster()

        self.rate = rospy.Rate(10)

        # Subscribe to /gazebo/model_states to get the robot's ground truth pose
        rospy.Subscriber('/gazebo/model_states', ModelStates, self.model_states_callback)

    @staticmethod
    def to_tf(pose, frame_id, child_frame_id, stamp=None):
        assert pose.shape == (4, 4)
        if stamp is None:
            stamp = rospy.Time.now()
        t = TransformStamped()
        t.header.stamp = stamp
        t.header.frame_id = frame_id
        t.child_frame_id = child_frame_id
        t.transform.translation.x = pose[0, 3]
        t.transform.translation.y = pose[1, 3]
        t.transform.translation.z = pose[2, 3]
        q = quaternion_from_matrix(pose)
        # normalize quaternion
        q /= np.linalg.norm(q)
        t.transform.rotation.x = q[0]
        t.transform.rotation.y = q[1]
        t.transform.rotation.z = q[2]
        t.transform.rotation.w = q[3]
        return t

    def model_states_callback(self, msg):
        try:
            # Find the index of the robot in the list of models
            robot_index = msg.name.index(self.robot_name)
        except ValueError:
            rospy.logwarn(f"Robot model '{self.robot_name}' not found in /gazebo/model_states")
        else:
            stamp = rospy.Time.now()
            # Extract the pose of the robot
            robot_pose = msg.pose[robot_index]
            Tr_map_robot = numpify(robot_pose)

            # Publish the transform from world to robot
            tf = self.to_tf(Tr_map_robot, self.static_frame, self.robot_frame, stamp)
            self.tf_br.sendTransform(tf)
            self.rate.sleep()

    def spin(self):
        try:
            rospy.spin()
        except rospy.ROSInterruptException:
            pass


def main():
    node = GroundTruthPublisher()
    node.spin()


if __name__ == '__main__':
    main()
