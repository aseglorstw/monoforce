#!/usr/bin/env python
"""
"""
from __future__ import absolute_import, division, print_function
import numpy as np
import os
import cv2
import rospy
from monoforce.utils import slots, str2bool
from ros_numpy import numpify
from rosbag import Bag
from sensor_msgs.msg import PointCloud2
from cv_bridge import CvBridge
from monoforce.ros import (load_tf_buffer, rgb_msg_to_cv2, get_closest_msg,
                           get_cams_lidar_transformations, get_camera_infos, append_transformation)
from tqdm import tqdm
from argparse import ArgumentParser
import pandas as pd


def arg_parser():
    parser = ArgumentParser()
    parser.add_argument('--lidar-topic', type=str, default='/points')
    parser.add_argument('--camera-topics', type=str, nargs='+')
    parser.add_argument('--camera-info-topics', type=str, nargs='+')
    parser.add_argument('--save-data', type=str2bool, default=True)
    parser.add_argument('--bag-path', type=str)
    parser.add_argument('--start-time', type=float, default=None)
    parser.add_argument('--time-period', type=float, default=1.0)
    return parser


def save_clouds_and_images(bag_path, rgb_topics, lidar_topic,
                           start_time=None, time_period=1.0, lidar='os_sensor', save=True):
    data_path = bag_path.replace('.bag', '_trav')
    clouds_path = os.path.join(data_path, 'clouds')
    os.makedirs(clouds_path, exist_ok=True)
    images_path = os.path.join(data_path, 'images')
    os.makedirs(images_path, exist_ok=True)
    cv_bridge = CvBridge()

    if isinstance(start_time, float):
        start_time = rospy.Time.from_sec(start_time)

    with Bag(bag_path, 'r') as bag:
        # save clouds and get timestamps
        timestamps = []
        ids = []
        last_time = None
        print('Saving clouds from topic "%s"' % lidar_topic)
        for topic, msg, t in tqdm(bag.read_messages(topics=[lidar_topic], start_time=start_time),
                                  total=bag.get_message_count(topic_filters=[lidar_topic])):
            # skip messages which are too close to each other (time difference < time_period seconds)
            if last_time is not None and (t.to_sec() - last_time) < time_period:
                continue
            last_time = t.to_sec()
            # print('Got lidar msg from topic "%s" at %.3f s' % (topic, t.to_sec()))

            msg = PointCloud2(*slots(msg))
            cloud_struct = numpify(msg)
            # print('Cloud struct:', cloud_struct.shape)
            if cloud_struct.ndim == 2:
                cloud_struct = cloud_struct.reshape((-1,))

            if lidar is None:
                lidar = msg.header.frame_id
            timestamps.append(t.to_sec())
            id = '{secs}_{nsecs:09d}'.format(secs=msg.header.stamp.secs, nsecs=msg.header.stamp.nsecs)
            ids.append(id)

            if save:
                # save cloud
                p = os.path.join(clouds_path, f'{id}.npz')
                np.savez_compressed(p, cloud=cloud_struct)

        # create pandas dataframe with time differences for each camera
        cameras = [t.split('/')[1] for t in rgb_topics]
        df = pd.DataFrame(columns=cameras, index=ids)
        # save images at cloud timestamps
        for rgb_topic in rgb_topics:
            camera = rgb_topic.split('/')[1]
            print('Saving images from topic "%s"' % rgb_topic)
            for i in tqdm(range(len(timestamps))):
                # get the closest image at points time
                msg, t_diff = get_closest_msg(bag=bag, topic=rgb_topic, time_moment=timestamps[i],
                                              time_window=2*time_period, max_time_diff=time_period,
                                              return_time_diff=True)
                # append time difference to dataframe
                df.loc[ids[i], camera] = t_diff
                # convert msg to cv2 image
                img_raw = rgb_msg_to_cv2(msg, cv_bridge)
                if save:
                    # save images
                    cv2.imwrite(os.path.join(images_path, '%s_%s.png' % (ids[i], camera)), img_raw)

        # save dataframe
        df.to_csv(os.path.join(data_path, 'time_differences.csv'))

def process(bag_path, lidar_topic, camera_topics, camera_info_topics, save_data,
            robot_frame='base_link', lidar_frame='ouster_link', start_time=None, time_period=1.0, **kwargs):
    assert os.path.exists(bag_path), 'Bag file does not exist: %s' % bag_path

    tf_buffer = load_tf_buffer([bag_path])
    print('Obtaining camera infos from bag file...')
    get_camera_infos(bag_path, camera_info_topics, save=save_data)
    print('Obtaining lidar to camera transformations from bag file...')
    get_cams_lidar_transformations(bag_path, camera_topics, lidar_topic, tf_buffer, save=save_data)
    print(f'Obtaining {robot_frame} to base_footprint transformations from bag file...')
    append_transformation(bag_path, source_frame=robot_frame, target_frame='base_footprint', save=save_data, tf_buffer=tf_buffer)
    print(f'Obtaining {robot_frame} to {lidar_frame} transformations from bag file...')
    append_transformation(bag_path, source_frame=robot_frame, target_frame=lidar_frame, save=save_data, tf_buffer=tf_buffer,
                          matrix_name=f'T_{robot_frame}__os_sensor')
    print('Saving clouds and images...')
    save_clouds_and_images(bag_path, camera_topics, lidar_topic,
                           start_time=start_time, time_period=time_period, save=save_data)


def main():
    args = arg_parser().parse_args()
    print(args)
    process(**vars(args))


if __name__ == '__main__':
    main()
