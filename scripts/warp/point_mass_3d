#!/usr/bin/env python

import torch
import warp as wp
import numpy as np
from scipy.spatial.transform import Rotation
from monoforce.vis import set_axes_equal
import matplotlib.pyplot as plt
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D
from warp.optim import Adam


def forward(pos: wp.vec3,
            rot: wp.mat33,
            vel: wp.vec3,
            omega: wp.vec3,

            robot_point: wp.vec3,
            height: wp.array(dtype=float, ndim=2),

            damping: float,
            elasticity: float,
            mass: float,
            inv_inertia: wp.mat33,
            gravity: float
            ):
    """
    Motion model for a rigid body defined by contact points.
    The environment is a represented as a heightmap.
    """

    # compute derivatives
    dpos = wp.vec3(vel[0], vel[1], vel[2])
    omega_skew = skew_symmetric(omega)
    drot = omega_skew @ rot

    # transform robot points to world frame
    point = rot @ robot_point + pos
    dpoints = vel + omega_skew @ (point - pos)

    # get height at robot points
    h = grid_sample(height, point)

    # compute contact forces
    f_gravity = wp.vec3(0., 0., - mass * gravity)

    # compute contact (damping + elastic) forces
    contact = soft_contact(h, point, 10.)
    f_damping = wp.vec3(0., 0., -damping * dpoints[2]) * contact
    f_elastic = wp.vec3(0., 0., (h - point[2]) * elasticity) * contact

    # compute total force
    f = f_gravity + f_damping + f_elastic

    # compute acceleration
    dvel = wp.vec3(f[0] / mass, f[1] / mass, f[2] / mass)  # f / mass

    # compute angular acceleration
    domega = inv_inertia @ wp.cross(robot_point, f)

    return dpos, drot, dvel, domega

def skew_symmetric(vec: wp.vec3):
    return wp.mat33(
        0., -vec[2], vec[1],
        vec[2], 0., -vec[0],
        -vec[1], vec[0], 0.
    )

def grid_sample(height: wp.array(dtype=float, ndim=2),
                pos: wp.vec3):
    return height.numpy()[int(pos[0]), int(pos[1])]

def soft_contact(h: float, pos: wp.vec3, slope_rate: float = 10.):
    z = pos[2]
    # sigmoid function
    return 1. / (1. + wp.exp(-slope_rate * (h - z)))

@wp.kernel
def loss_l2(pos: wp.array(dtype=float),
            pos_gt: wp.array(dtype=float),
            loss: wp.array(dtype=float)):
    i = wp.tid()
    diff = pos[i] - pos_gt[i]
    l = diff * diff
    wp.atomic_add(loss, 0, l)
    # wp.printf('loss: %f\n', loss)

@wp.kernel
def update_trajectory(i: int,
                      pos: wp.vec3,
                      rot: wp.mat33,
                      vel: wp.vec3,
                      omega: wp.vec3,

                      traj_pos: wp.array(dtype=wp.vec3),
                      traj_rots: wp.array(dtype=wp.mat33),
                      traj_vels: wp.array(dtype=wp.vec3),
                      traj_omegas: wp.array(dtype=wp.vec3)):
    traj_pos[i] = pos
    traj_rots[i] = rot
    traj_vels[i] = vel
    traj_omegas[i] = omega


class Environment:
    """
    Environment class for the differentiable physics simulation.
    Several experiments with different initial states are being run in parallel.
    """
    def __init__(self):
        # initial time
        self.t0 = 0.

        # physics parameters of the environment
        self.gravity = 9.8
        self.damping = 200.
        self.elasticity = 2000.
        # mass of the robot
        self.mass = 10.
        # inertia of the robot
        self.inertia = wp.mat33(5., 0., 0.,
                                0., 5., 0.,
                                0., 0., 5.)
        self.inv_inertia = wp.inverse(self.inertia)

        # terrain 2.5-D height map
        self.height_map = wp.array(np.zeros((10, 10)), dtype=float)

        # simulation time
        self.traj_time = 3.0
        # number of time steps in a trajectory
        self.n_traj_steps = 100

        # time stamps for a trajectory
        self.tt = torch.linspace(float(self.t0), self.traj_time, self.n_traj_steps)
        # time step
        self.dt = float((self.tt[1:] - self.tt[:-1]).mean().item())

        # initial state
        self.pos = wp.vec3(0., 0., 1.)
        self.rot = wp.mat33(1., 0., 0.,
                            0., 1., 0.,
                            0., 0., 1.)
        self.vel = wp.vec3(1., 0., 0.)
        self.omega = wp.vec3(0., 0., 0.)

        # just one point for a state for now (center of gravity)
        self.robot_point = wp.vec3(0., 0., 0.)
        self.forces = wp.zeros((1,), dtype=wp.vec3)

        # trajectory from initial state
        self.traj_pos = wp.zeros((self.n_traj_steps,), dtype=wp.vec3)
        self.traj_rots = wp.zeros((self.n_traj_steps,), dtype=wp.mat33)
        self.traj_vels = wp.zeros((self.n_traj_steps,), dtype=wp.vec3)
        self.traj_omegas = wp.zeros((self.n_traj_steps,), dtype=wp.vec3)

    def run(self):
        """
        Differentiable physics simulation kernel.
        Runs a forward simulation for a given number of time steps.
        Each experiment is run in a separate thread defined by its index.
        """
        for i in range(self.n_traj_steps):
            dpos, drot, dvel, domega = forward(self.pos, self.rot, self.vel, self.omega,
                                               self.robot_point, self.height_map,
                                               self.damping, self.elasticity, self.mass, self.inv_inertia, self.gravity)
            # update state
            self.pos = self.pos + dpos * self.dt
            self.rot = self.rot + skew_symmetric(self.omega) @ self.rot * self.dt
            self.vel = self.vel + dvel * self.dt
            self.omega = self.omega + domega * self.dt

            # store trajectory
            wp.launch(kernel=update_trajectory, dim=1,
                      inputs=[i, self.pos, self.rot, self.vel, self.omega],
                      outputs=[self.traj_pos, self.traj_rots, self.traj_vels, self.traj_omegas])

    def optimize(self):
        loss = wp.zeros(1, dtype=float, requires_grad=True)

        pos = wp.array(self.pos, dtype=float, requires_grad=True)
        opt = Adam([pos], lr=0.1)
        tape = wp.Tape()

        pos_gt = wp.array([4., 0., 0.], dtype=float, requires_grad=False)

        for i in range(100):
            loss.zero_()
            # self.pos = wp.vec3(0., 0., 1.)

            with tape:
                # self.run()
                wp.launch(kernel=loss_l2, dim=3, inputs=[pos, pos_gt], outputs=[loss])

            tape.backward(loss=loss)
            opt.step([pos.grad])
            tape.zero()

            # print(pos.numpy())
            print(loss.numpy())

    def vis(self):
        # plot trajectory in 3d
        fig = plt.figure(figsize=(10, 10))
        ax = fig.add_subplot(111, projection='3d')
        set_axes_equal(ax)
        ax.set_xlabel('x [m]')
        ax.set_ylabel('y [m]')

        # visualize terrain as a surface
        H, W = self.height_map.shape
        x = np.arange(-H//2, H//2, 1)
        y = np.arange(-W//2, W//2, 1)
        X, Y = np.meshgrid(x, y)
        Z = self.height_map.numpy()
        ax.plot_surface(X, Y, Z, cmap=cm.coolwarm, linewidth=0, antialiased=False, alpha=0.5)

        # visualize trajectory
        for i in range(self.traj_pos.shape[0]):
            ax.plot(self.traj_pos.numpy()[i, 0],
                    self.traj_pos.numpy()[i, 1],
                    self.traj_pos.numpy()[i, 2],
                    'o--', color='b')
            plt.pause(0.01)
        plt.show()


def main():
    wp.init()

    env = Environment()
    env.run()
    env.vis()
    # env.optimize()


if __name__ == '__main__':
    main()
